// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"rpgroll/ent/rolldef"
	"rpgroll/ent/user"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RollDefCreate is the builder for creating a RollDef entity.
type RollDefCreate struct {
	config
	mutation *RollDefMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (rdc *RollDefCreate) SetName(s string) *RollDefCreate {
	rdc.mutation.SetName(s)
	return rdc
}

// SetDice sets the "dice" field.
func (rdc *RollDefCreate) SetDice(s string) *RollDefCreate {
	rdc.mutation.SetDice(s)
	return rdc
}

// SetModifier sets the "modifier" field.
func (rdc *RollDefCreate) SetModifier(i int) *RollDefCreate {
	rdc.mutation.SetModifier(i)
	return rdc
}

// SetSuccessRule sets the "successRule" field.
func (rdc *RollDefCreate) SetSuccessRule(s string) *RollDefCreate {
	rdc.mutation.SetSuccessRule(s)
	return rdc
}

// SetSuccessTarget sets the "successTarget" field.
func (rdc *RollDefCreate) SetSuccessTarget(s string) *RollDefCreate {
	rdc.mutation.SetSuccessTarget(s)
	return rdc
}

// SetComment sets the "comment" field.
func (rdc *RollDefCreate) SetComment(s string) *RollDefCreate {
	rdc.mutation.SetComment(s)
	return rdc
}

// SetShared sets the "shared" field.
func (rdc *RollDefCreate) SetShared(b bool) *RollDefCreate {
	rdc.mutation.SetShared(b)
	return rdc
}

// SetNillableShared sets the "shared" field if the given value is not nil.
func (rdc *RollDefCreate) SetNillableShared(b *bool) *RollDefCreate {
	if b != nil {
		rdc.SetShared(*b)
	}
	return rdc
}

// SetID sets the "id" field.
func (rdc *RollDefCreate) SetID(s string) *RollDefCreate {
	rdc.mutation.SetID(s)
	return rdc
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (rdc *RollDefCreate) SetOwnerID(id string) *RollDefCreate {
	rdc.mutation.SetOwnerID(id)
	return rdc
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (rdc *RollDefCreate) SetNillableOwnerID(id *string) *RollDefCreate {
	if id != nil {
		rdc = rdc.SetOwnerID(*id)
	}
	return rdc
}

// SetOwner sets the "owner" edge to the User entity.
func (rdc *RollDefCreate) SetOwner(u *User) *RollDefCreate {
	return rdc.SetOwnerID(u.ID)
}

// Mutation returns the RollDefMutation object of the builder.
func (rdc *RollDefCreate) Mutation() *RollDefMutation {
	return rdc.mutation
}

// Save creates the RollDef in the database.
func (rdc *RollDefCreate) Save(ctx context.Context) (*RollDef, error) {
	rdc.defaults()
	return withHooks(ctx, rdc.sqlSave, rdc.mutation, rdc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rdc *RollDefCreate) SaveX(ctx context.Context) *RollDef {
	v, err := rdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rdc *RollDefCreate) Exec(ctx context.Context) error {
	_, err := rdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rdc *RollDefCreate) ExecX(ctx context.Context) {
	if err := rdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rdc *RollDefCreate) defaults() {
	if _, ok := rdc.mutation.Shared(); !ok {
		v := rolldef.DefaultShared
		rdc.mutation.SetShared(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rdc *RollDefCreate) check() error {
	if _, ok := rdc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "RollDef.name"`)}
	}
	if _, ok := rdc.mutation.Dice(); !ok {
		return &ValidationError{Name: "dice", err: errors.New(`ent: missing required field "RollDef.dice"`)}
	}
	if _, ok := rdc.mutation.Modifier(); !ok {
		return &ValidationError{Name: "modifier", err: errors.New(`ent: missing required field "RollDef.modifier"`)}
	}
	if _, ok := rdc.mutation.SuccessRule(); !ok {
		return &ValidationError{Name: "successRule", err: errors.New(`ent: missing required field "RollDef.successRule"`)}
	}
	if _, ok := rdc.mutation.SuccessTarget(); !ok {
		return &ValidationError{Name: "successTarget", err: errors.New(`ent: missing required field "RollDef.successTarget"`)}
	}
	if _, ok := rdc.mutation.Comment(); !ok {
		return &ValidationError{Name: "comment", err: errors.New(`ent: missing required field "RollDef.comment"`)}
	}
	if _, ok := rdc.mutation.Shared(); !ok {
		return &ValidationError{Name: "shared", err: errors.New(`ent: missing required field "RollDef.shared"`)}
	}
	return nil
}

func (rdc *RollDefCreate) sqlSave(ctx context.Context) (*RollDef, error) {
	if err := rdc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected RollDef.ID type: %T", _spec.ID.Value)
		}
	}
	rdc.mutation.id = &_node.ID
	rdc.mutation.done = true
	return _node, nil
}

func (rdc *RollDefCreate) createSpec() (*RollDef, *sqlgraph.CreateSpec) {
	var (
		_node = &RollDef{config: rdc.config}
		_spec = sqlgraph.NewCreateSpec(rolldef.Table, sqlgraph.NewFieldSpec(rolldef.FieldID, field.TypeString))
	)
	if id, ok := rdc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := rdc.mutation.Name(); ok {
		_spec.SetField(rolldef.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := rdc.mutation.Dice(); ok {
		_spec.SetField(rolldef.FieldDice, field.TypeString, value)
		_node.Dice = value
	}
	if value, ok := rdc.mutation.Modifier(); ok {
		_spec.SetField(rolldef.FieldModifier, field.TypeInt, value)
		_node.Modifier = value
	}
	if value, ok := rdc.mutation.SuccessRule(); ok {
		_spec.SetField(rolldef.FieldSuccessRule, field.TypeString, value)
		_node.SuccessRule = value
	}
	if value, ok := rdc.mutation.SuccessTarget(); ok {
		_spec.SetField(rolldef.FieldSuccessTarget, field.TypeString, value)
		_node.SuccessTarget = value
	}
	if value, ok := rdc.mutation.Comment(); ok {
		_spec.SetField(rolldef.FieldComment, field.TypeString, value)
		_node.Comment = value
	}
	if value, ok := rdc.mutation.Shared(); ok {
		_spec.SetField(rolldef.FieldShared, field.TypeBool, value)
		_node.Shared = value
	}
	if nodes := rdc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rolldef.OwnerTable,
			Columns: []string{rolldef.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_rolldefs = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RollDefCreateBulk is the builder for creating many RollDef entities in bulk.
type RollDefCreateBulk struct {
	config
	builders []*RollDefCreate
}

// Save creates the RollDef entities in the database.
func (rdcb *RollDefCreateBulk) Save(ctx context.Context) ([]*RollDef, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rdcb.builders))
	nodes := make([]*RollDef, len(rdcb.builders))
	mutators := make([]Mutator, len(rdcb.builders))
	for i := range rdcb.builders {
		func(i int, root context.Context) {
			builder := rdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RollDefMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rdcb *RollDefCreateBulk) SaveX(ctx context.Context) []*RollDef {
	v, err := rdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rdcb *RollDefCreateBulk) Exec(ctx context.Context) error {
	_, err := rdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rdcb *RollDefCreateBulk) ExecX(ctx context.Context) {
	if err := rdcb.Exec(ctx); err != nil {
		panic(err)
	}
}
