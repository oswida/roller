// Code generated by ent, DO NOT EDIT.

package rolldef

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the rolldef type in the database.
	Label = "roll_def"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDice holds the string denoting the dice field in the database.
	FieldDice = "dice"
	// FieldModifier holds the string denoting the modifier field in the database.
	FieldModifier = "modifier"
	// FieldSuccessRule holds the string denoting the successrule field in the database.
	FieldSuccessRule = "success_rule"
	// FieldSuccessTarget holds the string denoting the successtarget field in the database.
	FieldSuccessTarget = "success_target"
	// FieldComment holds the string denoting the comment field in the database.
	FieldComment = "comment"
	// FieldShared holds the string denoting the shared field in the database.
	FieldShared = "shared"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// Table holds the table name of the rolldef in the database.
	Table = "roll_defs"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "roll_defs"
	// OwnerInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	OwnerInverseTable = "users"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "user_rolldefs"
)

// Columns holds all SQL columns for rolldef fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDice,
	FieldModifier,
	FieldSuccessRule,
	FieldSuccessTarget,
	FieldComment,
	FieldShared,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "roll_defs"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_rolldefs",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultShared holds the default value on creation for the "shared" field.
	DefaultShared bool
)

// OrderOption defines the ordering options for the RollDef queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDice orders the results by the dice field.
func ByDice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDice, opts...).ToFunc()
}

// ByModifier orders the results by the modifier field.
func ByModifier(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModifier, opts...).ToFunc()
}

// BySuccessRule orders the results by the successRule field.
func BySuccessRule(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSuccessRule, opts...).ToFunc()
}

// BySuccessTarget orders the results by the successTarget field.
func BySuccessTarget(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSuccessTarget, opts...).ToFunc()
}

// ByComment orders the results by the comment field.
func ByComment(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldComment, opts...).ToFunc()
}

// ByShared orders the results by the shared field.
func ByShared(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldShared, opts...).ToFunc()
}

// ByOwnerField orders the results by owner field.
func ByOwnerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnerStep(), sql.OrderByField(field, opts...))
	}
}
func newOwnerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
	)
}
