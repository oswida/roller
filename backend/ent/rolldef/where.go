// Code generated by ent, DO NOT EDIT.

package rolldef

import (
	"rpgroll/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.RollDef {
	return predicate.RollDef(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.RollDef {
	return predicate.RollDef(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.RollDef {
	return predicate.RollDef(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.RollDef {
	return predicate.RollDef(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.RollDef {
	return predicate.RollDef(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.RollDef {
	return predicate.RollDef(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.RollDef {
	return predicate.RollDef(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.RollDef {
	return predicate.RollDef(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.RollDef {
	return predicate.RollDef(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.RollDef {
	return predicate.RollDef(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.RollDef {
	return predicate.RollDef(sql.FieldContainsFold(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.RollDef {
	return predicate.RollDef(sql.FieldEQ(FieldName, v))
}

// Dice applies equality check predicate on the "dice" field. It's identical to DiceEQ.
func Dice(v string) predicate.RollDef {
	return predicate.RollDef(sql.FieldEQ(FieldDice, v))
}

// Modifier applies equality check predicate on the "modifier" field. It's identical to ModifierEQ.
func Modifier(v int) predicate.RollDef {
	return predicate.RollDef(sql.FieldEQ(FieldModifier, v))
}

// SuccessRule applies equality check predicate on the "successRule" field. It's identical to SuccessRuleEQ.
func SuccessRule(v string) predicate.RollDef {
	return predicate.RollDef(sql.FieldEQ(FieldSuccessRule, v))
}

// SuccessTarget applies equality check predicate on the "successTarget" field. It's identical to SuccessTargetEQ.
func SuccessTarget(v string) predicate.RollDef {
	return predicate.RollDef(sql.FieldEQ(FieldSuccessTarget, v))
}

// Comment applies equality check predicate on the "comment" field. It's identical to CommentEQ.
func Comment(v string) predicate.RollDef {
	return predicate.RollDef(sql.FieldEQ(FieldComment, v))
}

// Shared applies equality check predicate on the "shared" field. It's identical to SharedEQ.
func Shared(v bool) predicate.RollDef {
	return predicate.RollDef(sql.FieldEQ(FieldShared, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.RollDef {
	return predicate.RollDef(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.RollDef {
	return predicate.RollDef(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.RollDef {
	return predicate.RollDef(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.RollDef {
	return predicate.RollDef(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.RollDef {
	return predicate.RollDef(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.RollDef {
	return predicate.RollDef(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.RollDef {
	return predicate.RollDef(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.RollDef {
	return predicate.RollDef(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.RollDef {
	return predicate.RollDef(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.RollDef {
	return predicate.RollDef(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.RollDef {
	return predicate.RollDef(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.RollDef {
	return predicate.RollDef(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.RollDef {
	return predicate.RollDef(sql.FieldContainsFold(FieldName, v))
}

// DiceEQ applies the EQ predicate on the "dice" field.
func DiceEQ(v string) predicate.RollDef {
	return predicate.RollDef(sql.FieldEQ(FieldDice, v))
}

// DiceNEQ applies the NEQ predicate on the "dice" field.
func DiceNEQ(v string) predicate.RollDef {
	return predicate.RollDef(sql.FieldNEQ(FieldDice, v))
}

// DiceIn applies the In predicate on the "dice" field.
func DiceIn(vs ...string) predicate.RollDef {
	return predicate.RollDef(sql.FieldIn(FieldDice, vs...))
}

// DiceNotIn applies the NotIn predicate on the "dice" field.
func DiceNotIn(vs ...string) predicate.RollDef {
	return predicate.RollDef(sql.FieldNotIn(FieldDice, vs...))
}

// DiceGT applies the GT predicate on the "dice" field.
func DiceGT(v string) predicate.RollDef {
	return predicate.RollDef(sql.FieldGT(FieldDice, v))
}

// DiceGTE applies the GTE predicate on the "dice" field.
func DiceGTE(v string) predicate.RollDef {
	return predicate.RollDef(sql.FieldGTE(FieldDice, v))
}

// DiceLT applies the LT predicate on the "dice" field.
func DiceLT(v string) predicate.RollDef {
	return predicate.RollDef(sql.FieldLT(FieldDice, v))
}

// DiceLTE applies the LTE predicate on the "dice" field.
func DiceLTE(v string) predicate.RollDef {
	return predicate.RollDef(sql.FieldLTE(FieldDice, v))
}

// DiceContains applies the Contains predicate on the "dice" field.
func DiceContains(v string) predicate.RollDef {
	return predicate.RollDef(sql.FieldContains(FieldDice, v))
}

// DiceHasPrefix applies the HasPrefix predicate on the "dice" field.
func DiceHasPrefix(v string) predicate.RollDef {
	return predicate.RollDef(sql.FieldHasPrefix(FieldDice, v))
}

// DiceHasSuffix applies the HasSuffix predicate on the "dice" field.
func DiceHasSuffix(v string) predicate.RollDef {
	return predicate.RollDef(sql.FieldHasSuffix(FieldDice, v))
}

// DiceEqualFold applies the EqualFold predicate on the "dice" field.
func DiceEqualFold(v string) predicate.RollDef {
	return predicate.RollDef(sql.FieldEqualFold(FieldDice, v))
}

// DiceContainsFold applies the ContainsFold predicate on the "dice" field.
func DiceContainsFold(v string) predicate.RollDef {
	return predicate.RollDef(sql.FieldContainsFold(FieldDice, v))
}

// ModifierEQ applies the EQ predicate on the "modifier" field.
func ModifierEQ(v int) predicate.RollDef {
	return predicate.RollDef(sql.FieldEQ(FieldModifier, v))
}

// ModifierNEQ applies the NEQ predicate on the "modifier" field.
func ModifierNEQ(v int) predicate.RollDef {
	return predicate.RollDef(sql.FieldNEQ(FieldModifier, v))
}

// ModifierIn applies the In predicate on the "modifier" field.
func ModifierIn(vs ...int) predicate.RollDef {
	return predicate.RollDef(sql.FieldIn(FieldModifier, vs...))
}

// ModifierNotIn applies the NotIn predicate on the "modifier" field.
func ModifierNotIn(vs ...int) predicate.RollDef {
	return predicate.RollDef(sql.FieldNotIn(FieldModifier, vs...))
}

// ModifierGT applies the GT predicate on the "modifier" field.
func ModifierGT(v int) predicate.RollDef {
	return predicate.RollDef(sql.FieldGT(FieldModifier, v))
}

// ModifierGTE applies the GTE predicate on the "modifier" field.
func ModifierGTE(v int) predicate.RollDef {
	return predicate.RollDef(sql.FieldGTE(FieldModifier, v))
}

// ModifierLT applies the LT predicate on the "modifier" field.
func ModifierLT(v int) predicate.RollDef {
	return predicate.RollDef(sql.FieldLT(FieldModifier, v))
}

// ModifierLTE applies the LTE predicate on the "modifier" field.
func ModifierLTE(v int) predicate.RollDef {
	return predicate.RollDef(sql.FieldLTE(FieldModifier, v))
}

// SuccessRuleEQ applies the EQ predicate on the "successRule" field.
func SuccessRuleEQ(v string) predicate.RollDef {
	return predicate.RollDef(sql.FieldEQ(FieldSuccessRule, v))
}

// SuccessRuleNEQ applies the NEQ predicate on the "successRule" field.
func SuccessRuleNEQ(v string) predicate.RollDef {
	return predicate.RollDef(sql.FieldNEQ(FieldSuccessRule, v))
}

// SuccessRuleIn applies the In predicate on the "successRule" field.
func SuccessRuleIn(vs ...string) predicate.RollDef {
	return predicate.RollDef(sql.FieldIn(FieldSuccessRule, vs...))
}

// SuccessRuleNotIn applies the NotIn predicate on the "successRule" field.
func SuccessRuleNotIn(vs ...string) predicate.RollDef {
	return predicate.RollDef(sql.FieldNotIn(FieldSuccessRule, vs...))
}

// SuccessRuleGT applies the GT predicate on the "successRule" field.
func SuccessRuleGT(v string) predicate.RollDef {
	return predicate.RollDef(sql.FieldGT(FieldSuccessRule, v))
}

// SuccessRuleGTE applies the GTE predicate on the "successRule" field.
func SuccessRuleGTE(v string) predicate.RollDef {
	return predicate.RollDef(sql.FieldGTE(FieldSuccessRule, v))
}

// SuccessRuleLT applies the LT predicate on the "successRule" field.
func SuccessRuleLT(v string) predicate.RollDef {
	return predicate.RollDef(sql.FieldLT(FieldSuccessRule, v))
}

// SuccessRuleLTE applies the LTE predicate on the "successRule" field.
func SuccessRuleLTE(v string) predicate.RollDef {
	return predicate.RollDef(sql.FieldLTE(FieldSuccessRule, v))
}

// SuccessRuleContains applies the Contains predicate on the "successRule" field.
func SuccessRuleContains(v string) predicate.RollDef {
	return predicate.RollDef(sql.FieldContains(FieldSuccessRule, v))
}

// SuccessRuleHasPrefix applies the HasPrefix predicate on the "successRule" field.
func SuccessRuleHasPrefix(v string) predicate.RollDef {
	return predicate.RollDef(sql.FieldHasPrefix(FieldSuccessRule, v))
}

// SuccessRuleHasSuffix applies the HasSuffix predicate on the "successRule" field.
func SuccessRuleHasSuffix(v string) predicate.RollDef {
	return predicate.RollDef(sql.FieldHasSuffix(FieldSuccessRule, v))
}

// SuccessRuleEqualFold applies the EqualFold predicate on the "successRule" field.
func SuccessRuleEqualFold(v string) predicate.RollDef {
	return predicate.RollDef(sql.FieldEqualFold(FieldSuccessRule, v))
}

// SuccessRuleContainsFold applies the ContainsFold predicate on the "successRule" field.
func SuccessRuleContainsFold(v string) predicate.RollDef {
	return predicate.RollDef(sql.FieldContainsFold(FieldSuccessRule, v))
}

// SuccessTargetEQ applies the EQ predicate on the "successTarget" field.
func SuccessTargetEQ(v string) predicate.RollDef {
	return predicate.RollDef(sql.FieldEQ(FieldSuccessTarget, v))
}

// SuccessTargetNEQ applies the NEQ predicate on the "successTarget" field.
func SuccessTargetNEQ(v string) predicate.RollDef {
	return predicate.RollDef(sql.FieldNEQ(FieldSuccessTarget, v))
}

// SuccessTargetIn applies the In predicate on the "successTarget" field.
func SuccessTargetIn(vs ...string) predicate.RollDef {
	return predicate.RollDef(sql.FieldIn(FieldSuccessTarget, vs...))
}

// SuccessTargetNotIn applies the NotIn predicate on the "successTarget" field.
func SuccessTargetNotIn(vs ...string) predicate.RollDef {
	return predicate.RollDef(sql.FieldNotIn(FieldSuccessTarget, vs...))
}

// SuccessTargetGT applies the GT predicate on the "successTarget" field.
func SuccessTargetGT(v string) predicate.RollDef {
	return predicate.RollDef(sql.FieldGT(FieldSuccessTarget, v))
}

// SuccessTargetGTE applies the GTE predicate on the "successTarget" field.
func SuccessTargetGTE(v string) predicate.RollDef {
	return predicate.RollDef(sql.FieldGTE(FieldSuccessTarget, v))
}

// SuccessTargetLT applies the LT predicate on the "successTarget" field.
func SuccessTargetLT(v string) predicate.RollDef {
	return predicate.RollDef(sql.FieldLT(FieldSuccessTarget, v))
}

// SuccessTargetLTE applies the LTE predicate on the "successTarget" field.
func SuccessTargetLTE(v string) predicate.RollDef {
	return predicate.RollDef(sql.FieldLTE(FieldSuccessTarget, v))
}

// SuccessTargetContains applies the Contains predicate on the "successTarget" field.
func SuccessTargetContains(v string) predicate.RollDef {
	return predicate.RollDef(sql.FieldContains(FieldSuccessTarget, v))
}

// SuccessTargetHasPrefix applies the HasPrefix predicate on the "successTarget" field.
func SuccessTargetHasPrefix(v string) predicate.RollDef {
	return predicate.RollDef(sql.FieldHasPrefix(FieldSuccessTarget, v))
}

// SuccessTargetHasSuffix applies the HasSuffix predicate on the "successTarget" field.
func SuccessTargetHasSuffix(v string) predicate.RollDef {
	return predicate.RollDef(sql.FieldHasSuffix(FieldSuccessTarget, v))
}

// SuccessTargetEqualFold applies the EqualFold predicate on the "successTarget" field.
func SuccessTargetEqualFold(v string) predicate.RollDef {
	return predicate.RollDef(sql.FieldEqualFold(FieldSuccessTarget, v))
}

// SuccessTargetContainsFold applies the ContainsFold predicate on the "successTarget" field.
func SuccessTargetContainsFold(v string) predicate.RollDef {
	return predicate.RollDef(sql.FieldContainsFold(FieldSuccessTarget, v))
}

// CommentEQ applies the EQ predicate on the "comment" field.
func CommentEQ(v string) predicate.RollDef {
	return predicate.RollDef(sql.FieldEQ(FieldComment, v))
}

// CommentNEQ applies the NEQ predicate on the "comment" field.
func CommentNEQ(v string) predicate.RollDef {
	return predicate.RollDef(sql.FieldNEQ(FieldComment, v))
}

// CommentIn applies the In predicate on the "comment" field.
func CommentIn(vs ...string) predicate.RollDef {
	return predicate.RollDef(sql.FieldIn(FieldComment, vs...))
}

// CommentNotIn applies the NotIn predicate on the "comment" field.
func CommentNotIn(vs ...string) predicate.RollDef {
	return predicate.RollDef(sql.FieldNotIn(FieldComment, vs...))
}

// CommentGT applies the GT predicate on the "comment" field.
func CommentGT(v string) predicate.RollDef {
	return predicate.RollDef(sql.FieldGT(FieldComment, v))
}

// CommentGTE applies the GTE predicate on the "comment" field.
func CommentGTE(v string) predicate.RollDef {
	return predicate.RollDef(sql.FieldGTE(FieldComment, v))
}

// CommentLT applies the LT predicate on the "comment" field.
func CommentLT(v string) predicate.RollDef {
	return predicate.RollDef(sql.FieldLT(FieldComment, v))
}

// CommentLTE applies the LTE predicate on the "comment" field.
func CommentLTE(v string) predicate.RollDef {
	return predicate.RollDef(sql.FieldLTE(FieldComment, v))
}

// CommentContains applies the Contains predicate on the "comment" field.
func CommentContains(v string) predicate.RollDef {
	return predicate.RollDef(sql.FieldContains(FieldComment, v))
}

// CommentHasPrefix applies the HasPrefix predicate on the "comment" field.
func CommentHasPrefix(v string) predicate.RollDef {
	return predicate.RollDef(sql.FieldHasPrefix(FieldComment, v))
}

// CommentHasSuffix applies the HasSuffix predicate on the "comment" field.
func CommentHasSuffix(v string) predicate.RollDef {
	return predicate.RollDef(sql.FieldHasSuffix(FieldComment, v))
}

// CommentEqualFold applies the EqualFold predicate on the "comment" field.
func CommentEqualFold(v string) predicate.RollDef {
	return predicate.RollDef(sql.FieldEqualFold(FieldComment, v))
}

// CommentContainsFold applies the ContainsFold predicate on the "comment" field.
func CommentContainsFold(v string) predicate.RollDef {
	return predicate.RollDef(sql.FieldContainsFold(FieldComment, v))
}

// SharedEQ applies the EQ predicate on the "shared" field.
func SharedEQ(v bool) predicate.RollDef {
	return predicate.RollDef(sql.FieldEQ(FieldShared, v))
}

// SharedNEQ applies the NEQ predicate on the "shared" field.
func SharedNEQ(v bool) predicate.RollDef {
	return predicate.RollDef(sql.FieldNEQ(FieldShared, v))
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.RollDef {
	return predicate.RollDef(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.User) predicate.RollDef {
	return predicate.RollDef(func(s *sql.Selector) {
		step := newOwnerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.RollDef) predicate.RollDef {
	return predicate.RollDef(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.RollDef) predicate.RollDef {
	return predicate.RollDef(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.RollDef) predicate.RollDef {
	return predicate.RollDef(func(s *sql.Selector) {
		p(s.Not())
	})
}
