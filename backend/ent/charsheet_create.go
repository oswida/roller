// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"rpgroll/ent/charsheet"
	"rpgroll/ent/user"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CharsheetCreate is the builder for creating a Charsheet entity.
type CharsheetCreate struct {
	config
	mutation *CharsheetMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (cc *CharsheetCreate) SetName(s string) *CharsheetCreate {
	cc.mutation.SetName(s)
	return cc
}

// SetTemplate sets the "template" field.
func (cc *CharsheetCreate) SetTemplate(s string) *CharsheetCreate {
	cc.mutation.SetTemplate(s)
	return cc
}

// SetValues sets the "values" field.
func (cc *CharsheetCreate) SetValues(m map[string]interface{}) *CharsheetCreate {
	cc.mutation.SetValues(m)
	return cc
}

// SetShared sets the "shared" field.
func (cc *CharsheetCreate) SetShared(b bool) *CharsheetCreate {
	cc.mutation.SetShared(b)
	return cc
}

// SetPortrait sets the "portrait" field.
func (cc *CharsheetCreate) SetPortrait(s string) *CharsheetCreate {
	cc.mutation.SetPortrait(s)
	return cc
}

// SetID sets the "id" field.
func (cc *CharsheetCreate) SetID(s string) *CharsheetCreate {
	cc.mutation.SetID(s)
	return cc
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (cc *CharsheetCreate) SetOwnerID(id string) *CharsheetCreate {
	cc.mutation.SetOwnerID(id)
	return cc
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (cc *CharsheetCreate) SetNillableOwnerID(id *string) *CharsheetCreate {
	if id != nil {
		cc = cc.SetOwnerID(*id)
	}
	return cc
}

// SetOwner sets the "owner" edge to the User entity.
func (cc *CharsheetCreate) SetOwner(u *User) *CharsheetCreate {
	return cc.SetOwnerID(u.ID)
}

// Mutation returns the CharsheetMutation object of the builder.
func (cc *CharsheetCreate) Mutation() *CharsheetMutation {
	return cc.mutation
}

// Save creates the Charsheet in the database.
func (cc *CharsheetCreate) Save(ctx context.Context) (*Charsheet, error) {
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CharsheetCreate) SaveX(ctx context.Context) *Charsheet {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CharsheetCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CharsheetCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CharsheetCreate) check() error {
	if _, ok := cc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Charsheet.name"`)}
	}
	if _, ok := cc.mutation.Template(); !ok {
		return &ValidationError{Name: "template", err: errors.New(`ent: missing required field "Charsheet.template"`)}
	}
	if _, ok := cc.mutation.Values(); !ok {
		return &ValidationError{Name: "values", err: errors.New(`ent: missing required field "Charsheet.values"`)}
	}
	if _, ok := cc.mutation.Shared(); !ok {
		return &ValidationError{Name: "shared", err: errors.New(`ent: missing required field "Charsheet.shared"`)}
	}
	if _, ok := cc.mutation.Portrait(); !ok {
		return &ValidationError{Name: "portrait", err: errors.New(`ent: missing required field "Charsheet.portrait"`)}
	}
	return nil
}

func (cc *CharsheetCreate) sqlSave(ctx context.Context) (*Charsheet, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Charsheet.ID type: %T", _spec.ID.Value)
		}
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CharsheetCreate) createSpec() (*Charsheet, *sqlgraph.CreateSpec) {
	var (
		_node = &Charsheet{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(charsheet.Table, sqlgraph.NewFieldSpec(charsheet.FieldID, field.TypeString))
	)
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cc.mutation.Name(); ok {
		_spec.SetField(charsheet.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cc.mutation.Template(); ok {
		_spec.SetField(charsheet.FieldTemplate, field.TypeString, value)
		_node.Template = value
	}
	if value, ok := cc.mutation.Values(); ok {
		_spec.SetField(charsheet.FieldValues, field.TypeJSON, value)
		_node.Values = value
	}
	if value, ok := cc.mutation.Shared(); ok {
		_spec.SetField(charsheet.FieldShared, field.TypeBool, value)
		_node.Shared = value
	}
	if value, ok := cc.mutation.Portrait(); ok {
		_spec.SetField(charsheet.FieldPortrait, field.TypeString, value)
		_node.Portrait = value
	}
	if nodes := cc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   charsheet.OwnerTable,
			Columns: []string{charsheet.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_charsheets = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CharsheetCreateBulk is the builder for creating many Charsheet entities in bulk.
type CharsheetCreateBulk struct {
	config
	builders []*CharsheetCreate
}

// Save creates the Charsheet entities in the database.
func (ccb *CharsheetCreateBulk) Save(ctx context.Context) ([]*Charsheet, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Charsheet, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CharsheetMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CharsheetCreateBulk) SaveX(ctx context.Context) []*Charsheet {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CharsheetCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CharsheetCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
