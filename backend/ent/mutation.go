// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"rpgroll/ent/charsheet"
	"rpgroll/ent/predicate"
	"rpgroll/ent/roll"
	"rpgroll/ent/rolldef"
	"rpgroll/ent/room"
	"rpgroll/ent/user"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCharsheet = "Charsheet"
	TypeRoll      = "Roll"
	TypeRollDef   = "RollDef"
	TypeRoom      = "Room"
	TypeUser      = "User"
)

// CharsheetMutation represents an operation that mutates the Charsheet nodes in the graph.
type CharsheetMutation struct {
	config
	op            Op
	typ           string
	id            *string
	name          *string
	template      *string
	values        *map[string]interface{}
	shared        *bool
	portrait      *string
	clearedFields map[string]struct{}
	owner         *string
	clearedowner  bool
	done          bool
	oldValue      func(context.Context) (*Charsheet, error)
	predicates    []predicate.Charsheet
}

var _ ent.Mutation = (*CharsheetMutation)(nil)

// charsheetOption allows management of the mutation configuration using functional options.
type charsheetOption func(*CharsheetMutation)

// newCharsheetMutation creates new mutation for the Charsheet entity.
func newCharsheetMutation(c config, op Op, opts ...charsheetOption) *CharsheetMutation {
	m := &CharsheetMutation{
		config:        c,
		op:            op,
		typ:           TypeCharsheet,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCharsheetID sets the ID field of the mutation.
func withCharsheetID(id string) charsheetOption {
	return func(m *CharsheetMutation) {
		var (
			err   error
			once  sync.Once
			value *Charsheet
		)
		m.oldValue = func(ctx context.Context) (*Charsheet, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Charsheet.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCharsheet sets the old Charsheet of the mutation.
func withCharsheet(node *Charsheet) charsheetOption {
	return func(m *CharsheetMutation) {
		m.oldValue = func(context.Context) (*Charsheet, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CharsheetMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CharsheetMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Charsheet entities.
func (m *CharsheetMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CharsheetMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CharsheetMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Charsheet.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *CharsheetMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *CharsheetMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Charsheet entity.
// If the Charsheet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CharsheetMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *CharsheetMutation) ResetName() {
	m.name = nil
}

// SetTemplate sets the "template" field.
func (m *CharsheetMutation) SetTemplate(s string) {
	m.template = &s
}

// Template returns the value of the "template" field in the mutation.
func (m *CharsheetMutation) Template() (r string, exists bool) {
	v := m.template
	if v == nil {
		return
	}
	return *v, true
}

// OldTemplate returns the old "template" field's value of the Charsheet entity.
// If the Charsheet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CharsheetMutation) OldTemplate(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTemplate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTemplate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTemplate: %w", err)
	}
	return oldValue.Template, nil
}

// ResetTemplate resets all changes to the "template" field.
func (m *CharsheetMutation) ResetTemplate() {
	m.template = nil
}

// SetValues sets the "values" field.
func (m *CharsheetMutation) SetValues(value map[string]interface{}) {
	m.values = &value
}

// Values returns the value of the "values" field in the mutation.
func (m *CharsheetMutation) Values() (r map[string]interface{}, exists bool) {
	v := m.values
	if v == nil {
		return
	}
	return *v, true
}

// OldValues returns the old "values" field's value of the Charsheet entity.
// If the Charsheet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CharsheetMutation) OldValues(ctx context.Context) (v map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldValues is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldValues requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldValues: %w", err)
	}
	return oldValue.Values, nil
}

// ResetValues resets all changes to the "values" field.
func (m *CharsheetMutation) ResetValues() {
	m.values = nil
}

// SetShared sets the "shared" field.
func (m *CharsheetMutation) SetShared(b bool) {
	m.shared = &b
}

// Shared returns the value of the "shared" field in the mutation.
func (m *CharsheetMutation) Shared() (r bool, exists bool) {
	v := m.shared
	if v == nil {
		return
	}
	return *v, true
}

// OldShared returns the old "shared" field's value of the Charsheet entity.
// If the Charsheet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CharsheetMutation) OldShared(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldShared is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldShared requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShared: %w", err)
	}
	return oldValue.Shared, nil
}

// ResetShared resets all changes to the "shared" field.
func (m *CharsheetMutation) ResetShared() {
	m.shared = nil
}

// SetPortrait sets the "portrait" field.
func (m *CharsheetMutation) SetPortrait(s string) {
	m.portrait = &s
}

// Portrait returns the value of the "portrait" field in the mutation.
func (m *CharsheetMutation) Portrait() (r string, exists bool) {
	v := m.portrait
	if v == nil {
		return
	}
	return *v, true
}

// OldPortrait returns the old "portrait" field's value of the Charsheet entity.
// If the Charsheet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CharsheetMutation) OldPortrait(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPortrait is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPortrait requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPortrait: %w", err)
	}
	return oldValue.Portrait, nil
}

// ResetPortrait resets all changes to the "portrait" field.
func (m *CharsheetMutation) ResetPortrait() {
	m.portrait = nil
}

// SetOwnerID sets the "owner" edge to the User entity by id.
func (m *CharsheetMutation) SetOwnerID(id string) {
	m.owner = &id
}

// ClearOwner clears the "owner" edge to the User entity.
func (m *CharsheetMutation) ClearOwner() {
	m.clearedowner = true
}

// OwnerCleared reports if the "owner" edge to the User entity was cleared.
func (m *CharsheetMutation) OwnerCleared() bool {
	return m.clearedowner
}

// OwnerID returns the "owner" edge ID in the mutation.
func (m *CharsheetMutation) OwnerID() (id string, exists bool) {
	if m.owner != nil {
		return *m.owner, true
	}
	return
}

// OwnerIDs returns the "owner" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OwnerID instead. It exists only for internal usage by the builders.
func (m *CharsheetMutation) OwnerIDs() (ids []string) {
	if id := m.owner; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOwner resets all changes to the "owner" edge.
func (m *CharsheetMutation) ResetOwner() {
	m.owner = nil
	m.clearedowner = false
}

// Where appends a list predicates to the CharsheetMutation builder.
func (m *CharsheetMutation) Where(ps ...predicate.Charsheet) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CharsheetMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CharsheetMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Charsheet, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CharsheetMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CharsheetMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Charsheet).
func (m *CharsheetMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CharsheetMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.name != nil {
		fields = append(fields, charsheet.FieldName)
	}
	if m.template != nil {
		fields = append(fields, charsheet.FieldTemplate)
	}
	if m.values != nil {
		fields = append(fields, charsheet.FieldValues)
	}
	if m.shared != nil {
		fields = append(fields, charsheet.FieldShared)
	}
	if m.portrait != nil {
		fields = append(fields, charsheet.FieldPortrait)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CharsheetMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case charsheet.FieldName:
		return m.Name()
	case charsheet.FieldTemplate:
		return m.Template()
	case charsheet.FieldValues:
		return m.Values()
	case charsheet.FieldShared:
		return m.Shared()
	case charsheet.FieldPortrait:
		return m.Portrait()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CharsheetMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case charsheet.FieldName:
		return m.OldName(ctx)
	case charsheet.FieldTemplate:
		return m.OldTemplate(ctx)
	case charsheet.FieldValues:
		return m.OldValues(ctx)
	case charsheet.FieldShared:
		return m.OldShared(ctx)
	case charsheet.FieldPortrait:
		return m.OldPortrait(ctx)
	}
	return nil, fmt.Errorf("unknown Charsheet field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CharsheetMutation) SetField(name string, value ent.Value) error {
	switch name {
	case charsheet.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case charsheet.FieldTemplate:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTemplate(v)
		return nil
	case charsheet.FieldValues:
		v, ok := value.(map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetValues(v)
		return nil
	case charsheet.FieldShared:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShared(v)
		return nil
	case charsheet.FieldPortrait:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPortrait(v)
		return nil
	}
	return fmt.Errorf("unknown Charsheet field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CharsheetMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CharsheetMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CharsheetMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Charsheet numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CharsheetMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CharsheetMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CharsheetMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Charsheet nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CharsheetMutation) ResetField(name string) error {
	switch name {
	case charsheet.FieldName:
		m.ResetName()
		return nil
	case charsheet.FieldTemplate:
		m.ResetTemplate()
		return nil
	case charsheet.FieldValues:
		m.ResetValues()
		return nil
	case charsheet.FieldShared:
		m.ResetShared()
		return nil
	case charsheet.FieldPortrait:
		m.ResetPortrait()
		return nil
	}
	return fmt.Errorf("unknown Charsheet field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CharsheetMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.owner != nil {
		edges = append(edges, charsheet.EdgeOwner)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CharsheetMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case charsheet.EdgeOwner:
		if id := m.owner; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CharsheetMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CharsheetMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CharsheetMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedowner {
		edges = append(edges, charsheet.EdgeOwner)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CharsheetMutation) EdgeCleared(name string) bool {
	switch name {
	case charsheet.EdgeOwner:
		return m.clearedowner
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CharsheetMutation) ClearEdge(name string) error {
	switch name {
	case charsheet.EdgeOwner:
		m.ClearOwner()
		return nil
	}
	return fmt.Errorf("unknown Charsheet unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CharsheetMutation) ResetEdge(name string) error {
	switch name {
	case charsheet.EdgeOwner:
		m.ResetOwner()
		return nil
	}
	return fmt.Errorf("unknown Charsheet edge %s", name)
}

// RollMutation represents an operation that mutates the Roll nodes in the graph.
type RollMutation struct {
	config
	op               Op
	typ              string
	id               *string
	tstamp           *string
	time             *time.Time
	result           *string
	diceColor        *string
	diceMaterial     *string
	comment          *string
	successRule      *string
	successTarget    *int
	addsuccessTarget *int
	private          *bool
	revealed         *bool
	clearedFields    map[string]struct{}
	owner            *string
	clearedowner     bool
	room             *string
	clearedroom      bool
	done             bool
	oldValue         func(context.Context) (*Roll, error)
	predicates       []predicate.Roll
}

var _ ent.Mutation = (*RollMutation)(nil)

// rollOption allows management of the mutation configuration using functional options.
type rollOption func(*RollMutation)

// newRollMutation creates new mutation for the Roll entity.
func newRollMutation(c config, op Op, opts ...rollOption) *RollMutation {
	m := &RollMutation{
		config:        c,
		op:            op,
		typ:           TypeRoll,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRollID sets the ID field of the mutation.
func withRollID(id string) rollOption {
	return func(m *RollMutation) {
		var (
			err   error
			once  sync.Once
			value *Roll
		)
		m.oldValue = func(ctx context.Context) (*Roll, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Roll.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRoll sets the old Roll of the mutation.
func withRoll(node *Roll) rollOption {
	return func(m *RollMutation) {
		m.oldValue = func(context.Context) (*Roll, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RollMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RollMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Roll entities.
func (m *RollMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RollMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RollMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Roll.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTstamp sets the "tstamp" field.
func (m *RollMutation) SetTstamp(s string) {
	m.tstamp = &s
}

// Tstamp returns the value of the "tstamp" field in the mutation.
func (m *RollMutation) Tstamp() (r string, exists bool) {
	v := m.tstamp
	if v == nil {
		return
	}
	return *v, true
}

// OldTstamp returns the old "tstamp" field's value of the Roll entity.
// If the Roll object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RollMutation) OldTstamp(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTstamp is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTstamp requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTstamp: %w", err)
	}
	return oldValue.Tstamp, nil
}

// ResetTstamp resets all changes to the "tstamp" field.
func (m *RollMutation) ResetTstamp() {
	m.tstamp = nil
}

// SetTime sets the "time" field.
func (m *RollMutation) SetTime(t time.Time) {
	m.time = &t
}

// Time returns the value of the "time" field in the mutation.
func (m *RollMutation) Time() (r time.Time, exists bool) {
	v := m.time
	if v == nil {
		return
	}
	return *v, true
}

// OldTime returns the old "time" field's value of the Roll entity.
// If the Roll object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RollMutation) OldTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTime: %w", err)
	}
	return oldValue.Time, nil
}

// ResetTime resets all changes to the "time" field.
func (m *RollMutation) ResetTime() {
	m.time = nil
}

// SetResult sets the "result" field.
func (m *RollMutation) SetResult(s string) {
	m.result = &s
}

// Result returns the value of the "result" field in the mutation.
func (m *RollMutation) Result() (r string, exists bool) {
	v := m.result
	if v == nil {
		return
	}
	return *v, true
}

// OldResult returns the old "result" field's value of the Roll entity.
// If the Roll object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RollMutation) OldResult(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldResult is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldResult requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResult: %w", err)
	}
	return oldValue.Result, nil
}

// ResetResult resets all changes to the "result" field.
func (m *RollMutation) ResetResult() {
	m.result = nil
}

// SetDiceColor sets the "diceColor" field.
func (m *RollMutation) SetDiceColor(s string) {
	m.diceColor = &s
}

// DiceColor returns the value of the "diceColor" field in the mutation.
func (m *RollMutation) DiceColor() (r string, exists bool) {
	v := m.diceColor
	if v == nil {
		return
	}
	return *v, true
}

// OldDiceColor returns the old "diceColor" field's value of the Roll entity.
// If the Roll object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RollMutation) OldDiceColor(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDiceColor is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDiceColor requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDiceColor: %w", err)
	}
	return oldValue.DiceColor, nil
}

// ResetDiceColor resets all changes to the "diceColor" field.
func (m *RollMutation) ResetDiceColor() {
	m.diceColor = nil
}

// SetDiceMaterial sets the "diceMaterial" field.
func (m *RollMutation) SetDiceMaterial(s string) {
	m.diceMaterial = &s
}

// DiceMaterial returns the value of the "diceMaterial" field in the mutation.
func (m *RollMutation) DiceMaterial() (r string, exists bool) {
	v := m.diceMaterial
	if v == nil {
		return
	}
	return *v, true
}

// OldDiceMaterial returns the old "diceMaterial" field's value of the Roll entity.
// If the Roll object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RollMutation) OldDiceMaterial(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDiceMaterial is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDiceMaterial requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDiceMaterial: %w", err)
	}
	return oldValue.DiceMaterial, nil
}

// ResetDiceMaterial resets all changes to the "diceMaterial" field.
func (m *RollMutation) ResetDiceMaterial() {
	m.diceMaterial = nil
}

// SetComment sets the "comment" field.
func (m *RollMutation) SetComment(s string) {
	m.comment = &s
}

// Comment returns the value of the "comment" field in the mutation.
func (m *RollMutation) Comment() (r string, exists bool) {
	v := m.comment
	if v == nil {
		return
	}
	return *v, true
}

// OldComment returns the old "comment" field's value of the Roll entity.
// If the Roll object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RollMutation) OldComment(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldComment is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldComment requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldComment: %w", err)
	}
	return oldValue.Comment, nil
}

// ResetComment resets all changes to the "comment" field.
func (m *RollMutation) ResetComment() {
	m.comment = nil
}

// SetSuccessRule sets the "successRule" field.
func (m *RollMutation) SetSuccessRule(s string) {
	m.successRule = &s
}

// SuccessRule returns the value of the "successRule" field in the mutation.
func (m *RollMutation) SuccessRule() (r string, exists bool) {
	v := m.successRule
	if v == nil {
		return
	}
	return *v, true
}

// OldSuccessRule returns the old "successRule" field's value of the Roll entity.
// If the Roll object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RollMutation) OldSuccessRule(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSuccessRule is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSuccessRule requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSuccessRule: %w", err)
	}
	return oldValue.SuccessRule, nil
}

// ResetSuccessRule resets all changes to the "successRule" field.
func (m *RollMutation) ResetSuccessRule() {
	m.successRule = nil
}

// SetSuccessTarget sets the "successTarget" field.
func (m *RollMutation) SetSuccessTarget(i int) {
	m.successTarget = &i
	m.addsuccessTarget = nil
}

// SuccessTarget returns the value of the "successTarget" field in the mutation.
func (m *RollMutation) SuccessTarget() (r int, exists bool) {
	v := m.successTarget
	if v == nil {
		return
	}
	return *v, true
}

// OldSuccessTarget returns the old "successTarget" field's value of the Roll entity.
// If the Roll object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RollMutation) OldSuccessTarget(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSuccessTarget is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSuccessTarget requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSuccessTarget: %w", err)
	}
	return oldValue.SuccessTarget, nil
}

// AddSuccessTarget adds i to the "successTarget" field.
func (m *RollMutation) AddSuccessTarget(i int) {
	if m.addsuccessTarget != nil {
		*m.addsuccessTarget += i
	} else {
		m.addsuccessTarget = &i
	}
}

// AddedSuccessTarget returns the value that was added to the "successTarget" field in this mutation.
func (m *RollMutation) AddedSuccessTarget() (r int, exists bool) {
	v := m.addsuccessTarget
	if v == nil {
		return
	}
	return *v, true
}

// ResetSuccessTarget resets all changes to the "successTarget" field.
func (m *RollMutation) ResetSuccessTarget() {
	m.successTarget = nil
	m.addsuccessTarget = nil
}

// SetPrivate sets the "private" field.
func (m *RollMutation) SetPrivate(b bool) {
	m.private = &b
}

// Private returns the value of the "private" field in the mutation.
func (m *RollMutation) Private() (r bool, exists bool) {
	v := m.private
	if v == nil {
		return
	}
	return *v, true
}

// OldPrivate returns the old "private" field's value of the Roll entity.
// If the Roll object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RollMutation) OldPrivate(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrivate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrivate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrivate: %w", err)
	}
	return oldValue.Private, nil
}

// ResetPrivate resets all changes to the "private" field.
func (m *RollMutation) ResetPrivate() {
	m.private = nil
}

// SetRevealed sets the "revealed" field.
func (m *RollMutation) SetRevealed(b bool) {
	m.revealed = &b
}

// Revealed returns the value of the "revealed" field in the mutation.
func (m *RollMutation) Revealed() (r bool, exists bool) {
	v := m.revealed
	if v == nil {
		return
	}
	return *v, true
}

// OldRevealed returns the old "revealed" field's value of the Roll entity.
// If the Roll object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RollMutation) OldRevealed(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRevealed is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRevealed requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRevealed: %w", err)
	}
	return oldValue.Revealed, nil
}

// ResetRevealed resets all changes to the "revealed" field.
func (m *RollMutation) ResetRevealed() {
	m.revealed = nil
}

// SetOwnerID sets the "owner" edge to the User entity by id.
func (m *RollMutation) SetOwnerID(id string) {
	m.owner = &id
}

// ClearOwner clears the "owner" edge to the User entity.
func (m *RollMutation) ClearOwner() {
	m.clearedowner = true
}

// OwnerCleared reports if the "owner" edge to the User entity was cleared.
func (m *RollMutation) OwnerCleared() bool {
	return m.clearedowner
}

// OwnerID returns the "owner" edge ID in the mutation.
func (m *RollMutation) OwnerID() (id string, exists bool) {
	if m.owner != nil {
		return *m.owner, true
	}
	return
}

// OwnerIDs returns the "owner" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OwnerID instead. It exists only for internal usage by the builders.
func (m *RollMutation) OwnerIDs() (ids []string) {
	if id := m.owner; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOwner resets all changes to the "owner" edge.
func (m *RollMutation) ResetOwner() {
	m.owner = nil
	m.clearedowner = false
}

// SetRoomID sets the "room" edge to the Room entity by id.
func (m *RollMutation) SetRoomID(id string) {
	m.room = &id
}

// ClearRoom clears the "room" edge to the Room entity.
func (m *RollMutation) ClearRoom() {
	m.clearedroom = true
}

// RoomCleared reports if the "room" edge to the Room entity was cleared.
func (m *RollMutation) RoomCleared() bool {
	return m.clearedroom
}

// RoomID returns the "room" edge ID in the mutation.
func (m *RollMutation) RoomID() (id string, exists bool) {
	if m.room != nil {
		return *m.room, true
	}
	return
}

// RoomIDs returns the "room" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RoomID instead. It exists only for internal usage by the builders.
func (m *RollMutation) RoomIDs() (ids []string) {
	if id := m.room; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRoom resets all changes to the "room" edge.
func (m *RollMutation) ResetRoom() {
	m.room = nil
	m.clearedroom = false
}

// Where appends a list predicates to the RollMutation builder.
func (m *RollMutation) Where(ps ...predicate.Roll) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the RollMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *RollMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Roll, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *RollMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *RollMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Roll).
func (m *RollMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RollMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.tstamp != nil {
		fields = append(fields, roll.FieldTstamp)
	}
	if m.time != nil {
		fields = append(fields, roll.FieldTime)
	}
	if m.result != nil {
		fields = append(fields, roll.FieldResult)
	}
	if m.diceColor != nil {
		fields = append(fields, roll.FieldDiceColor)
	}
	if m.diceMaterial != nil {
		fields = append(fields, roll.FieldDiceMaterial)
	}
	if m.comment != nil {
		fields = append(fields, roll.FieldComment)
	}
	if m.successRule != nil {
		fields = append(fields, roll.FieldSuccessRule)
	}
	if m.successTarget != nil {
		fields = append(fields, roll.FieldSuccessTarget)
	}
	if m.private != nil {
		fields = append(fields, roll.FieldPrivate)
	}
	if m.revealed != nil {
		fields = append(fields, roll.FieldRevealed)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RollMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case roll.FieldTstamp:
		return m.Tstamp()
	case roll.FieldTime:
		return m.Time()
	case roll.FieldResult:
		return m.Result()
	case roll.FieldDiceColor:
		return m.DiceColor()
	case roll.FieldDiceMaterial:
		return m.DiceMaterial()
	case roll.FieldComment:
		return m.Comment()
	case roll.FieldSuccessRule:
		return m.SuccessRule()
	case roll.FieldSuccessTarget:
		return m.SuccessTarget()
	case roll.FieldPrivate:
		return m.Private()
	case roll.FieldRevealed:
		return m.Revealed()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RollMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case roll.FieldTstamp:
		return m.OldTstamp(ctx)
	case roll.FieldTime:
		return m.OldTime(ctx)
	case roll.FieldResult:
		return m.OldResult(ctx)
	case roll.FieldDiceColor:
		return m.OldDiceColor(ctx)
	case roll.FieldDiceMaterial:
		return m.OldDiceMaterial(ctx)
	case roll.FieldComment:
		return m.OldComment(ctx)
	case roll.FieldSuccessRule:
		return m.OldSuccessRule(ctx)
	case roll.FieldSuccessTarget:
		return m.OldSuccessTarget(ctx)
	case roll.FieldPrivate:
		return m.OldPrivate(ctx)
	case roll.FieldRevealed:
		return m.OldRevealed(ctx)
	}
	return nil, fmt.Errorf("unknown Roll field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RollMutation) SetField(name string, value ent.Value) error {
	switch name {
	case roll.FieldTstamp:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTstamp(v)
		return nil
	case roll.FieldTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTime(v)
		return nil
	case roll.FieldResult:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResult(v)
		return nil
	case roll.FieldDiceColor:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDiceColor(v)
		return nil
	case roll.FieldDiceMaterial:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDiceMaterial(v)
		return nil
	case roll.FieldComment:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetComment(v)
		return nil
	case roll.FieldSuccessRule:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSuccessRule(v)
		return nil
	case roll.FieldSuccessTarget:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSuccessTarget(v)
		return nil
	case roll.FieldPrivate:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrivate(v)
		return nil
	case roll.FieldRevealed:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRevealed(v)
		return nil
	}
	return fmt.Errorf("unknown Roll field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RollMutation) AddedFields() []string {
	var fields []string
	if m.addsuccessTarget != nil {
		fields = append(fields, roll.FieldSuccessTarget)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RollMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case roll.FieldSuccessTarget:
		return m.AddedSuccessTarget()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RollMutation) AddField(name string, value ent.Value) error {
	switch name {
	case roll.FieldSuccessTarget:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSuccessTarget(v)
		return nil
	}
	return fmt.Errorf("unknown Roll numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RollMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RollMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RollMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Roll nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RollMutation) ResetField(name string) error {
	switch name {
	case roll.FieldTstamp:
		m.ResetTstamp()
		return nil
	case roll.FieldTime:
		m.ResetTime()
		return nil
	case roll.FieldResult:
		m.ResetResult()
		return nil
	case roll.FieldDiceColor:
		m.ResetDiceColor()
		return nil
	case roll.FieldDiceMaterial:
		m.ResetDiceMaterial()
		return nil
	case roll.FieldComment:
		m.ResetComment()
		return nil
	case roll.FieldSuccessRule:
		m.ResetSuccessRule()
		return nil
	case roll.FieldSuccessTarget:
		m.ResetSuccessTarget()
		return nil
	case roll.FieldPrivate:
		m.ResetPrivate()
		return nil
	case roll.FieldRevealed:
		m.ResetRevealed()
		return nil
	}
	return fmt.Errorf("unknown Roll field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RollMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.owner != nil {
		edges = append(edges, roll.EdgeOwner)
	}
	if m.room != nil {
		edges = append(edges, roll.EdgeRoom)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RollMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case roll.EdgeOwner:
		if id := m.owner; id != nil {
			return []ent.Value{*id}
		}
	case roll.EdgeRoom:
		if id := m.room; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RollMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RollMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RollMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedowner {
		edges = append(edges, roll.EdgeOwner)
	}
	if m.clearedroom {
		edges = append(edges, roll.EdgeRoom)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RollMutation) EdgeCleared(name string) bool {
	switch name {
	case roll.EdgeOwner:
		return m.clearedowner
	case roll.EdgeRoom:
		return m.clearedroom
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RollMutation) ClearEdge(name string) error {
	switch name {
	case roll.EdgeOwner:
		m.ClearOwner()
		return nil
	case roll.EdgeRoom:
		m.ClearRoom()
		return nil
	}
	return fmt.Errorf("unknown Roll unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RollMutation) ResetEdge(name string) error {
	switch name {
	case roll.EdgeOwner:
		m.ResetOwner()
		return nil
	case roll.EdgeRoom:
		m.ResetRoom()
		return nil
	}
	return fmt.Errorf("unknown Roll edge %s", name)
}

// RollDefMutation represents an operation that mutates the RollDef nodes in the graph.
type RollDefMutation struct {
	config
	op            Op
	typ           string
	id            *string
	name          *string
	dice          *string
	modifier      *int
	addmodifier   *int
	successRule   *string
	successTarget *string
	comment       *string
	shared        *bool
	clearedFields map[string]struct{}
	owner         *string
	clearedowner  bool
	done          bool
	oldValue      func(context.Context) (*RollDef, error)
	predicates    []predicate.RollDef
}

var _ ent.Mutation = (*RollDefMutation)(nil)

// rolldefOption allows management of the mutation configuration using functional options.
type rolldefOption func(*RollDefMutation)

// newRollDefMutation creates new mutation for the RollDef entity.
func newRollDefMutation(c config, op Op, opts ...rolldefOption) *RollDefMutation {
	m := &RollDefMutation{
		config:        c,
		op:            op,
		typ:           TypeRollDef,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRollDefID sets the ID field of the mutation.
func withRollDefID(id string) rolldefOption {
	return func(m *RollDefMutation) {
		var (
			err   error
			once  sync.Once
			value *RollDef
		)
		m.oldValue = func(ctx context.Context) (*RollDef, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().RollDef.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRollDef sets the old RollDef of the mutation.
func withRollDef(node *RollDef) rolldefOption {
	return func(m *RollDefMutation) {
		m.oldValue = func(context.Context) (*RollDef, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RollDefMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RollDefMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of RollDef entities.
func (m *RollDefMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RollDefMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RollDefMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().RollDef.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *RollDefMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *RollDefMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the RollDef entity.
// If the RollDef object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RollDefMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *RollDefMutation) ResetName() {
	m.name = nil
}

// SetDice sets the "dice" field.
func (m *RollDefMutation) SetDice(s string) {
	m.dice = &s
}

// Dice returns the value of the "dice" field in the mutation.
func (m *RollDefMutation) Dice() (r string, exists bool) {
	v := m.dice
	if v == nil {
		return
	}
	return *v, true
}

// OldDice returns the old "dice" field's value of the RollDef entity.
// If the RollDef object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RollDefMutation) OldDice(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDice: %w", err)
	}
	return oldValue.Dice, nil
}

// ResetDice resets all changes to the "dice" field.
func (m *RollDefMutation) ResetDice() {
	m.dice = nil
}

// SetModifier sets the "modifier" field.
func (m *RollDefMutation) SetModifier(i int) {
	m.modifier = &i
	m.addmodifier = nil
}

// Modifier returns the value of the "modifier" field in the mutation.
func (m *RollDefMutation) Modifier() (r int, exists bool) {
	v := m.modifier
	if v == nil {
		return
	}
	return *v, true
}

// OldModifier returns the old "modifier" field's value of the RollDef entity.
// If the RollDef object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RollDefMutation) OldModifier(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldModifier is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldModifier requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldModifier: %w", err)
	}
	return oldValue.Modifier, nil
}

// AddModifier adds i to the "modifier" field.
func (m *RollDefMutation) AddModifier(i int) {
	if m.addmodifier != nil {
		*m.addmodifier += i
	} else {
		m.addmodifier = &i
	}
}

// AddedModifier returns the value that was added to the "modifier" field in this mutation.
func (m *RollDefMutation) AddedModifier() (r int, exists bool) {
	v := m.addmodifier
	if v == nil {
		return
	}
	return *v, true
}

// ResetModifier resets all changes to the "modifier" field.
func (m *RollDefMutation) ResetModifier() {
	m.modifier = nil
	m.addmodifier = nil
}

// SetSuccessRule sets the "successRule" field.
func (m *RollDefMutation) SetSuccessRule(s string) {
	m.successRule = &s
}

// SuccessRule returns the value of the "successRule" field in the mutation.
func (m *RollDefMutation) SuccessRule() (r string, exists bool) {
	v := m.successRule
	if v == nil {
		return
	}
	return *v, true
}

// OldSuccessRule returns the old "successRule" field's value of the RollDef entity.
// If the RollDef object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RollDefMutation) OldSuccessRule(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSuccessRule is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSuccessRule requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSuccessRule: %w", err)
	}
	return oldValue.SuccessRule, nil
}

// ResetSuccessRule resets all changes to the "successRule" field.
func (m *RollDefMutation) ResetSuccessRule() {
	m.successRule = nil
}

// SetSuccessTarget sets the "successTarget" field.
func (m *RollDefMutation) SetSuccessTarget(s string) {
	m.successTarget = &s
}

// SuccessTarget returns the value of the "successTarget" field in the mutation.
func (m *RollDefMutation) SuccessTarget() (r string, exists bool) {
	v := m.successTarget
	if v == nil {
		return
	}
	return *v, true
}

// OldSuccessTarget returns the old "successTarget" field's value of the RollDef entity.
// If the RollDef object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RollDefMutation) OldSuccessTarget(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSuccessTarget is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSuccessTarget requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSuccessTarget: %w", err)
	}
	return oldValue.SuccessTarget, nil
}

// ResetSuccessTarget resets all changes to the "successTarget" field.
func (m *RollDefMutation) ResetSuccessTarget() {
	m.successTarget = nil
}

// SetComment sets the "comment" field.
func (m *RollDefMutation) SetComment(s string) {
	m.comment = &s
}

// Comment returns the value of the "comment" field in the mutation.
func (m *RollDefMutation) Comment() (r string, exists bool) {
	v := m.comment
	if v == nil {
		return
	}
	return *v, true
}

// OldComment returns the old "comment" field's value of the RollDef entity.
// If the RollDef object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RollDefMutation) OldComment(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldComment is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldComment requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldComment: %w", err)
	}
	return oldValue.Comment, nil
}

// ResetComment resets all changes to the "comment" field.
func (m *RollDefMutation) ResetComment() {
	m.comment = nil
}

// SetShared sets the "shared" field.
func (m *RollDefMutation) SetShared(b bool) {
	m.shared = &b
}

// Shared returns the value of the "shared" field in the mutation.
func (m *RollDefMutation) Shared() (r bool, exists bool) {
	v := m.shared
	if v == nil {
		return
	}
	return *v, true
}

// OldShared returns the old "shared" field's value of the RollDef entity.
// If the RollDef object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RollDefMutation) OldShared(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldShared is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldShared requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShared: %w", err)
	}
	return oldValue.Shared, nil
}

// ResetShared resets all changes to the "shared" field.
func (m *RollDefMutation) ResetShared() {
	m.shared = nil
}

// SetOwnerID sets the "owner" edge to the User entity by id.
func (m *RollDefMutation) SetOwnerID(id string) {
	m.owner = &id
}

// ClearOwner clears the "owner" edge to the User entity.
func (m *RollDefMutation) ClearOwner() {
	m.clearedowner = true
}

// OwnerCleared reports if the "owner" edge to the User entity was cleared.
func (m *RollDefMutation) OwnerCleared() bool {
	return m.clearedowner
}

// OwnerID returns the "owner" edge ID in the mutation.
func (m *RollDefMutation) OwnerID() (id string, exists bool) {
	if m.owner != nil {
		return *m.owner, true
	}
	return
}

// OwnerIDs returns the "owner" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OwnerID instead. It exists only for internal usage by the builders.
func (m *RollDefMutation) OwnerIDs() (ids []string) {
	if id := m.owner; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOwner resets all changes to the "owner" edge.
func (m *RollDefMutation) ResetOwner() {
	m.owner = nil
	m.clearedowner = false
}

// Where appends a list predicates to the RollDefMutation builder.
func (m *RollDefMutation) Where(ps ...predicate.RollDef) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the RollDefMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *RollDefMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.RollDef, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *RollDefMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *RollDefMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (RollDef).
func (m *RollDefMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RollDefMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.name != nil {
		fields = append(fields, rolldef.FieldName)
	}
	if m.dice != nil {
		fields = append(fields, rolldef.FieldDice)
	}
	if m.modifier != nil {
		fields = append(fields, rolldef.FieldModifier)
	}
	if m.successRule != nil {
		fields = append(fields, rolldef.FieldSuccessRule)
	}
	if m.successTarget != nil {
		fields = append(fields, rolldef.FieldSuccessTarget)
	}
	if m.comment != nil {
		fields = append(fields, rolldef.FieldComment)
	}
	if m.shared != nil {
		fields = append(fields, rolldef.FieldShared)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RollDefMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case rolldef.FieldName:
		return m.Name()
	case rolldef.FieldDice:
		return m.Dice()
	case rolldef.FieldModifier:
		return m.Modifier()
	case rolldef.FieldSuccessRule:
		return m.SuccessRule()
	case rolldef.FieldSuccessTarget:
		return m.SuccessTarget()
	case rolldef.FieldComment:
		return m.Comment()
	case rolldef.FieldShared:
		return m.Shared()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RollDefMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case rolldef.FieldName:
		return m.OldName(ctx)
	case rolldef.FieldDice:
		return m.OldDice(ctx)
	case rolldef.FieldModifier:
		return m.OldModifier(ctx)
	case rolldef.FieldSuccessRule:
		return m.OldSuccessRule(ctx)
	case rolldef.FieldSuccessTarget:
		return m.OldSuccessTarget(ctx)
	case rolldef.FieldComment:
		return m.OldComment(ctx)
	case rolldef.FieldShared:
		return m.OldShared(ctx)
	}
	return nil, fmt.Errorf("unknown RollDef field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RollDefMutation) SetField(name string, value ent.Value) error {
	switch name {
	case rolldef.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case rolldef.FieldDice:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDice(v)
		return nil
	case rolldef.FieldModifier:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetModifier(v)
		return nil
	case rolldef.FieldSuccessRule:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSuccessRule(v)
		return nil
	case rolldef.FieldSuccessTarget:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSuccessTarget(v)
		return nil
	case rolldef.FieldComment:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetComment(v)
		return nil
	case rolldef.FieldShared:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShared(v)
		return nil
	}
	return fmt.Errorf("unknown RollDef field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RollDefMutation) AddedFields() []string {
	var fields []string
	if m.addmodifier != nil {
		fields = append(fields, rolldef.FieldModifier)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RollDefMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case rolldef.FieldModifier:
		return m.AddedModifier()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RollDefMutation) AddField(name string, value ent.Value) error {
	switch name {
	case rolldef.FieldModifier:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddModifier(v)
		return nil
	}
	return fmt.Errorf("unknown RollDef numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RollDefMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RollDefMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RollDefMutation) ClearField(name string) error {
	return fmt.Errorf("unknown RollDef nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RollDefMutation) ResetField(name string) error {
	switch name {
	case rolldef.FieldName:
		m.ResetName()
		return nil
	case rolldef.FieldDice:
		m.ResetDice()
		return nil
	case rolldef.FieldModifier:
		m.ResetModifier()
		return nil
	case rolldef.FieldSuccessRule:
		m.ResetSuccessRule()
		return nil
	case rolldef.FieldSuccessTarget:
		m.ResetSuccessTarget()
		return nil
	case rolldef.FieldComment:
		m.ResetComment()
		return nil
	case rolldef.FieldShared:
		m.ResetShared()
		return nil
	}
	return fmt.Errorf("unknown RollDef field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RollDefMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.owner != nil {
		edges = append(edges, rolldef.EdgeOwner)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RollDefMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case rolldef.EdgeOwner:
		if id := m.owner; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RollDefMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RollDefMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RollDefMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedowner {
		edges = append(edges, rolldef.EdgeOwner)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RollDefMutation) EdgeCleared(name string) bool {
	switch name {
	case rolldef.EdgeOwner:
		return m.clearedowner
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RollDefMutation) ClearEdge(name string) error {
	switch name {
	case rolldef.EdgeOwner:
		m.ClearOwner()
		return nil
	}
	return fmt.Errorf("unknown RollDef unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RollDefMutation) ResetEdge(name string) error {
	switch name {
	case rolldef.EdgeOwner:
		m.ResetOwner()
		return nil
	}
	return fmt.Errorf("unknown RollDef edge %s", name)
}

// RoomMutation represents an operation that mutates the Room nodes in the graph.
type RoomMutation struct {
	config
	op            Op
	typ           string
	id            *string
	name          *string
	bkg           *string
	clearedFields map[string]struct{}
	rolls         map[string]struct{}
	removedrolls  map[string]struct{}
	clearedrolls  bool
	owner         *string
	clearedowner  bool
	done          bool
	oldValue      func(context.Context) (*Room, error)
	predicates    []predicate.Room
}

var _ ent.Mutation = (*RoomMutation)(nil)

// roomOption allows management of the mutation configuration using functional options.
type roomOption func(*RoomMutation)

// newRoomMutation creates new mutation for the Room entity.
func newRoomMutation(c config, op Op, opts ...roomOption) *RoomMutation {
	m := &RoomMutation{
		config:        c,
		op:            op,
		typ:           TypeRoom,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRoomID sets the ID field of the mutation.
func withRoomID(id string) roomOption {
	return func(m *RoomMutation) {
		var (
			err   error
			once  sync.Once
			value *Room
		)
		m.oldValue = func(ctx context.Context) (*Room, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Room.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRoom sets the old Room of the mutation.
func withRoom(node *Room) roomOption {
	return func(m *RoomMutation) {
		m.oldValue = func(context.Context) (*Room, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RoomMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RoomMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Room entities.
func (m *RoomMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RoomMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RoomMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Room.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *RoomMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *RoomMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Room entity.
// If the Room object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoomMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *RoomMutation) ResetName() {
	m.name = nil
}

// SetBkg sets the "bkg" field.
func (m *RoomMutation) SetBkg(s string) {
	m.bkg = &s
}

// Bkg returns the value of the "bkg" field in the mutation.
func (m *RoomMutation) Bkg() (r string, exists bool) {
	v := m.bkg
	if v == nil {
		return
	}
	return *v, true
}

// OldBkg returns the old "bkg" field's value of the Room entity.
// If the Room object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoomMutation) OldBkg(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBkg is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBkg requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBkg: %w", err)
	}
	return oldValue.Bkg, nil
}

// ResetBkg resets all changes to the "bkg" field.
func (m *RoomMutation) ResetBkg() {
	m.bkg = nil
}

// AddRollIDs adds the "rolls" edge to the Roll entity by ids.
func (m *RoomMutation) AddRollIDs(ids ...string) {
	if m.rolls == nil {
		m.rolls = make(map[string]struct{})
	}
	for i := range ids {
		m.rolls[ids[i]] = struct{}{}
	}
}

// ClearRolls clears the "rolls" edge to the Roll entity.
func (m *RoomMutation) ClearRolls() {
	m.clearedrolls = true
}

// RollsCleared reports if the "rolls" edge to the Roll entity was cleared.
func (m *RoomMutation) RollsCleared() bool {
	return m.clearedrolls
}

// RemoveRollIDs removes the "rolls" edge to the Roll entity by IDs.
func (m *RoomMutation) RemoveRollIDs(ids ...string) {
	if m.removedrolls == nil {
		m.removedrolls = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.rolls, ids[i])
		m.removedrolls[ids[i]] = struct{}{}
	}
}

// RemovedRolls returns the removed IDs of the "rolls" edge to the Roll entity.
func (m *RoomMutation) RemovedRollsIDs() (ids []string) {
	for id := range m.removedrolls {
		ids = append(ids, id)
	}
	return
}

// RollsIDs returns the "rolls" edge IDs in the mutation.
func (m *RoomMutation) RollsIDs() (ids []string) {
	for id := range m.rolls {
		ids = append(ids, id)
	}
	return
}

// ResetRolls resets all changes to the "rolls" edge.
func (m *RoomMutation) ResetRolls() {
	m.rolls = nil
	m.clearedrolls = false
	m.removedrolls = nil
}

// SetOwnerID sets the "owner" edge to the User entity by id.
func (m *RoomMutation) SetOwnerID(id string) {
	m.owner = &id
}

// ClearOwner clears the "owner" edge to the User entity.
func (m *RoomMutation) ClearOwner() {
	m.clearedowner = true
}

// OwnerCleared reports if the "owner" edge to the User entity was cleared.
func (m *RoomMutation) OwnerCleared() bool {
	return m.clearedowner
}

// OwnerID returns the "owner" edge ID in the mutation.
func (m *RoomMutation) OwnerID() (id string, exists bool) {
	if m.owner != nil {
		return *m.owner, true
	}
	return
}

// OwnerIDs returns the "owner" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OwnerID instead. It exists only for internal usage by the builders.
func (m *RoomMutation) OwnerIDs() (ids []string) {
	if id := m.owner; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOwner resets all changes to the "owner" edge.
func (m *RoomMutation) ResetOwner() {
	m.owner = nil
	m.clearedowner = false
}

// Where appends a list predicates to the RoomMutation builder.
func (m *RoomMutation) Where(ps ...predicate.Room) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the RoomMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *RoomMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Room, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *RoomMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *RoomMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Room).
func (m *RoomMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RoomMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.name != nil {
		fields = append(fields, room.FieldName)
	}
	if m.bkg != nil {
		fields = append(fields, room.FieldBkg)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RoomMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case room.FieldName:
		return m.Name()
	case room.FieldBkg:
		return m.Bkg()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RoomMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case room.FieldName:
		return m.OldName(ctx)
	case room.FieldBkg:
		return m.OldBkg(ctx)
	}
	return nil, fmt.Errorf("unknown Room field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RoomMutation) SetField(name string, value ent.Value) error {
	switch name {
	case room.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case room.FieldBkg:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBkg(v)
		return nil
	}
	return fmt.Errorf("unknown Room field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RoomMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RoomMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RoomMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Room numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RoomMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RoomMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RoomMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Room nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RoomMutation) ResetField(name string) error {
	switch name {
	case room.FieldName:
		m.ResetName()
		return nil
	case room.FieldBkg:
		m.ResetBkg()
		return nil
	}
	return fmt.Errorf("unknown Room field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RoomMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.rolls != nil {
		edges = append(edges, room.EdgeRolls)
	}
	if m.owner != nil {
		edges = append(edges, room.EdgeOwner)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RoomMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case room.EdgeRolls:
		ids := make([]ent.Value, 0, len(m.rolls))
		for id := range m.rolls {
			ids = append(ids, id)
		}
		return ids
	case room.EdgeOwner:
		if id := m.owner; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RoomMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedrolls != nil {
		edges = append(edges, room.EdgeRolls)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RoomMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case room.EdgeRolls:
		ids := make([]ent.Value, 0, len(m.removedrolls))
		for id := range m.removedrolls {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RoomMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedrolls {
		edges = append(edges, room.EdgeRolls)
	}
	if m.clearedowner {
		edges = append(edges, room.EdgeOwner)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RoomMutation) EdgeCleared(name string) bool {
	switch name {
	case room.EdgeRolls:
		return m.clearedrolls
	case room.EdgeOwner:
		return m.clearedowner
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RoomMutation) ClearEdge(name string) error {
	switch name {
	case room.EdgeOwner:
		m.ClearOwner()
		return nil
	}
	return fmt.Errorf("unknown Room unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RoomMutation) ResetEdge(name string) error {
	switch name {
	case room.EdgeRolls:
		m.ResetRolls()
		return nil
	case room.EdgeOwner:
		m.ResetOwner()
		return nil
	}
	return fmt.Errorf("unknown Room edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                Op
	typ               string
	id                *string
	login             *string
	passwd            *string
	name              *string
	color             *string
	settings          *map[string]interface{}
	clearedFields     map[string]struct{}
	rooms             map[string]struct{}
	removedrooms      map[string]struct{}
	clearedrooms      bool
	rolls             map[string]struct{}
	removedrolls      map[string]struct{}
	clearedrolls      bool
	charsheets        map[string]struct{}
	removedcharsheets map[string]struct{}
	clearedcharsheets bool
	rolldefs          map[string]struct{}
	removedrolldefs   map[string]struct{}
	clearedrolldefs   bool
	done              bool
	oldValue          func(context.Context) (*User, error)
	predicates        []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id string) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetLogin sets the "login" field.
func (m *UserMutation) SetLogin(s string) {
	m.login = &s
}

// Login returns the value of the "login" field in the mutation.
func (m *UserMutation) Login() (r string, exists bool) {
	v := m.login
	if v == nil {
		return
	}
	return *v, true
}

// OldLogin returns the old "login" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldLogin(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLogin is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLogin requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLogin: %w", err)
	}
	return oldValue.Login, nil
}

// ResetLogin resets all changes to the "login" field.
func (m *UserMutation) ResetLogin() {
	m.login = nil
}

// SetPasswd sets the "passwd" field.
func (m *UserMutation) SetPasswd(s string) {
	m.passwd = &s
}

// Passwd returns the value of the "passwd" field in the mutation.
func (m *UserMutation) Passwd() (r string, exists bool) {
	v := m.passwd
	if v == nil {
		return
	}
	return *v, true
}

// OldPasswd returns the old "passwd" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPasswd(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPasswd is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPasswd requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPasswd: %w", err)
	}
	return oldValue.Passwd, nil
}

// ResetPasswd resets all changes to the "passwd" field.
func (m *UserMutation) ResetPasswd() {
	m.passwd = nil
}

// SetName sets the "name" field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
}

// SetColor sets the "color" field.
func (m *UserMutation) SetColor(s string) {
	m.color = &s
}

// Color returns the value of the "color" field in the mutation.
func (m *UserMutation) Color() (r string, exists bool) {
	v := m.color
	if v == nil {
		return
	}
	return *v, true
}

// OldColor returns the old "color" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldColor(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldColor is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldColor requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldColor: %w", err)
	}
	return oldValue.Color, nil
}

// ResetColor resets all changes to the "color" field.
func (m *UserMutation) ResetColor() {
	m.color = nil
}

// SetSettings sets the "settings" field.
func (m *UserMutation) SetSettings(value map[string]interface{}) {
	m.settings = &value
}

// Settings returns the value of the "settings" field in the mutation.
func (m *UserMutation) Settings() (r map[string]interface{}, exists bool) {
	v := m.settings
	if v == nil {
		return
	}
	return *v, true
}

// OldSettings returns the old "settings" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldSettings(ctx context.Context) (v map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSettings is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSettings requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSettings: %w", err)
	}
	return oldValue.Settings, nil
}

// ResetSettings resets all changes to the "settings" field.
func (m *UserMutation) ResetSettings() {
	m.settings = nil
}

// AddRoomIDs adds the "rooms" edge to the Room entity by ids.
func (m *UserMutation) AddRoomIDs(ids ...string) {
	if m.rooms == nil {
		m.rooms = make(map[string]struct{})
	}
	for i := range ids {
		m.rooms[ids[i]] = struct{}{}
	}
}

// ClearRooms clears the "rooms" edge to the Room entity.
func (m *UserMutation) ClearRooms() {
	m.clearedrooms = true
}

// RoomsCleared reports if the "rooms" edge to the Room entity was cleared.
func (m *UserMutation) RoomsCleared() bool {
	return m.clearedrooms
}

// RemoveRoomIDs removes the "rooms" edge to the Room entity by IDs.
func (m *UserMutation) RemoveRoomIDs(ids ...string) {
	if m.removedrooms == nil {
		m.removedrooms = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.rooms, ids[i])
		m.removedrooms[ids[i]] = struct{}{}
	}
}

// RemovedRooms returns the removed IDs of the "rooms" edge to the Room entity.
func (m *UserMutation) RemovedRoomsIDs() (ids []string) {
	for id := range m.removedrooms {
		ids = append(ids, id)
	}
	return
}

// RoomsIDs returns the "rooms" edge IDs in the mutation.
func (m *UserMutation) RoomsIDs() (ids []string) {
	for id := range m.rooms {
		ids = append(ids, id)
	}
	return
}

// ResetRooms resets all changes to the "rooms" edge.
func (m *UserMutation) ResetRooms() {
	m.rooms = nil
	m.clearedrooms = false
	m.removedrooms = nil
}

// AddRollIDs adds the "rolls" edge to the Roll entity by ids.
func (m *UserMutation) AddRollIDs(ids ...string) {
	if m.rolls == nil {
		m.rolls = make(map[string]struct{})
	}
	for i := range ids {
		m.rolls[ids[i]] = struct{}{}
	}
}

// ClearRolls clears the "rolls" edge to the Roll entity.
func (m *UserMutation) ClearRolls() {
	m.clearedrolls = true
}

// RollsCleared reports if the "rolls" edge to the Roll entity was cleared.
func (m *UserMutation) RollsCleared() bool {
	return m.clearedrolls
}

// RemoveRollIDs removes the "rolls" edge to the Roll entity by IDs.
func (m *UserMutation) RemoveRollIDs(ids ...string) {
	if m.removedrolls == nil {
		m.removedrolls = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.rolls, ids[i])
		m.removedrolls[ids[i]] = struct{}{}
	}
}

// RemovedRolls returns the removed IDs of the "rolls" edge to the Roll entity.
func (m *UserMutation) RemovedRollsIDs() (ids []string) {
	for id := range m.removedrolls {
		ids = append(ids, id)
	}
	return
}

// RollsIDs returns the "rolls" edge IDs in the mutation.
func (m *UserMutation) RollsIDs() (ids []string) {
	for id := range m.rolls {
		ids = append(ids, id)
	}
	return
}

// ResetRolls resets all changes to the "rolls" edge.
func (m *UserMutation) ResetRolls() {
	m.rolls = nil
	m.clearedrolls = false
	m.removedrolls = nil
}

// AddCharsheetIDs adds the "charsheets" edge to the Charsheet entity by ids.
func (m *UserMutation) AddCharsheetIDs(ids ...string) {
	if m.charsheets == nil {
		m.charsheets = make(map[string]struct{})
	}
	for i := range ids {
		m.charsheets[ids[i]] = struct{}{}
	}
}

// ClearCharsheets clears the "charsheets" edge to the Charsheet entity.
func (m *UserMutation) ClearCharsheets() {
	m.clearedcharsheets = true
}

// CharsheetsCleared reports if the "charsheets" edge to the Charsheet entity was cleared.
func (m *UserMutation) CharsheetsCleared() bool {
	return m.clearedcharsheets
}

// RemoveCharsheetIDs removes the "charsheets" edge to the Charsheet entity by IDs.
func (m *UserMutation) RemoveCharsheetIDs(ids ...string) {
	if m.removedcharsheets == nil {
		m.removedcharsheets = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.charsheets, ids[i])
		m.removedcharsheets[ids[i]] = struct{}{}
	}
}

// RemovedCharsheets returns the removed IDs of the "charsheets" edge to the Charsheet entity.
func (m *UserMutation) RemovedCharsheetsIDs() (ids []string) {
	for id := range m.removedcharsheets {
		ids = append(ids, id)
	}
	return
}

// CharsheetsIDs returns the "charsheets" edge IDs in the mutation.
func (m *UserMutation) CharsheetsIDs() (ids []string) {
	for id := range m.charsheets {
		ids = append(ids, id)
	}
	return
}

// ResetCharsheets resets all changes to the "charsheets" edge.
func (m *UserMutation) ResetCharsheets() {
	m.charsheets = nil
	m.clearedcharsheets = false
	m.removedcharsheets = nil
}

// AddRolldefIDs adds the "rolldefs" edge to the RollDef entity by ids.
func (m *UserMutation) AddRolldefIDs(ids ...string) {
	if m.rolldefs == nil {
		m.rolldefs = make(map[string]struct{})
	}
	for i := range ids {
		m.rolldefs[ids[i]] = struct{}{}
	}
}

// ClearRolldefs clears the "rolldefs" edge to the RollDef entity.
func (m *UserMutation) ClearRolldefs() {
	m.clearedrolldefs = true
}

// RolldefsCleared reports if the "rolldefs" edge to the RollDef entity was cleared.
func (m *UserMutation) RolldefsCleared() bool {
	return m.clearedrolldefs
}

// RemoveRolldefIDs removes the "rolldefs" edge to the RollDef entity by IDs.
func (m *UserMutation) RemoveRolldefIDs(ids ...string) {
	if m.removedrolldefs == nil {
		m.removedrolldefs = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.rolldefs, ids[i])
		m.removedrolldefs[ids[i]] = struct{}{}
	}
}

// RemovedRolldefs returns the removed IDs of the "rolldefs" edge to the RollDef entity.
func (m *UserMutation) RemovedRolldefsIDs() (ids []string) {
	for id := range m.removedrolldefs {
		ids = append(ids, id)
	}
	return
}

// RolldefsIDs returns the "rolldefs" edge IDs in the mutation.
func (m *UserMutation) RolldefsIDs() (ids []string) {
	for id := range m.rolldefs {
		ids = append(ids, id)
	}
	return
}

// ResetRolldefs resets all changes to the "rolldefs" edge.
func (m *UserMutation) ResetRolldefs() {
	m.rolldefs = nil
	m.clearedrolldefs = false
	m.removedrolldefs = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.login != nil {
		fields = append(fields, user.FieldLogin)
	}
	if m.passwd != nil {
		fields = append(fields, user.FieldPasswd)
	}
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	if m.color != nil {
		fields = append(fields, user.FieldColor)
	}
	if m.settings != nil {
		fields = append(fields, user.FieldSettings)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldLogin:
		return m.Login()
	case user.FieldPasswd:
		return m.Passwd()
	case user.FieldName:
		return m.Name()
	case user.FieldColor:
		return m.Color()
	case user.FieldSettings:
		return m.Settings()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldLogin:
		return m.OldLogin(ctx)
	case user.FieldPasswd:
		return m.OldPasswd(ctx)
	case user.FieldName:
		return m.OldName(ctx)
	case user.FieldColor:
		return m.OldColor(ctx)
	case user.FieldSettings:
		return m.OldSettings(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldLogin:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLogin(v)
		return nil
	case user.FieldPasswd:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPasswd(v)
		return nil
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case user.FieldColor:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetColor(v)
		return nil
	case user.FieldSettings:
		v, ok := value.(map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSettings(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldLogin:
		m.ResetLogin()
		return nil
	case user.FieldPasswd:
		m.ResetPasswd()
		return nil
	case user.FieldName:
		m.ResetName()
		return nil
	case user.FieldColor:
		m.ResetColor()
		return nil
	case user.FieldSettings:
		m.ResetSettings()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.rooms != nil {
		edges = append(edges, user.EdgeRooms)
	}
	if m.rolls != nil {
		edges = append(edges, user.EdgeRolls)
	}
	if m.charsheets != nil {
		edges = append(edges, user.EdgeCharsheets)
	}
	if m.rolldefs != nil {
		edges = append(edges, user.EdgeRolldefs)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeRooms:
		ids := make([]ent.Value, 0, len(m.rooms))
		for id := range m.rooms {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeRolls:
		ids := make([]ent.Value, 0, len(m.rolls))
		for id := range m.rolls {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeCharsheets:
		ids := make([]ent.Value, 0, len(m.charsheets))
		for id := range m.charsheets {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeRolldefs:
		ids := make([]ent.Value, 0, len(m.rolldefs))
		for id := range m.rolldefs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedrooms != nil {
		edges = append(edges, user.EdgeRooms)
	}
	if m.removedrolls != nil {
		edges = append(edges, user.EdgeRolls)
	}
	if m.removedcharsheets != nil {
		edges = append(edges, user.EdgeCharsheets)
	}
	if m.removedrolldefs != nil {
		edges = append(edges, user.EdgeRolldefs)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeRooms:
		ids := make([]ent.Value, 0, len(m.removedrooms))
		for id := range m.removedrooms {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeRolls:
		ids := make([]ent.Value, 0, len(m.removedrolls))
		for id := range m.removedrolls {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeCharsheets:
		ids := make([]ent.Value, 0, len(m.removedcharsheets))
		for id := range m.removedcharsheets {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeRolldefs:
		ids := make([]ent.Value, 0, len(m.removedrolldefs))
		for id := range m.removedrolldefs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedrooms {
		edges = append(edges, user.EdgeRooms)
	}
	if m.clearedrolls {
		edges = append(edges, user.EdgeRolls)
	}
	if m.clearedcharsheets {
		edges = append(edges, user.EdgeCharsheets)
	}
	if m.clearedrolldefs {
		edges = append(edges, user.EdgeRolldefs)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeRooms:
		return m.clearedrooms
	case user.EdgeRolls:
		return m.clearedrolls
	case user.EdgeCharsheets:
		return m.clearedcharsheets
	case user.EdgeRolldefs:
		return m.clearedrolldefs
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeRooms:
		m.ResetRooms()
		return nil
	case user.EdgeRolls:
		m.ResetRolls()
		return nil
	case user.EdgeCharsheets:
		m.ResetCharsheets()
		return nil
	case user.EdgeRolldefs:
		m.ResetRolldefs()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
