// Code generated by ent, DO NOT EDIT.

package roll

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the roll type in the database.
	Label = "roll"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTstamp holds the string denoting the tstamp field in the database.
	FieldTstamp = "tstamp"
	// FieldTime holds the string denoting the time field in the database.
	FieldTime = "time"
	// FieldResult holds the string denoting the result field in the database.
	FieldResult = "result"
	// FieldDiceColor holds the string denoting the dicecolor field in the database.
	FieldDiceColor = "dice_color"
	// FieldDiceMaterial holds the string denoting the dicematerial field in the database.
	FieldDiceMaterial = "dice_material"
	// FieldComment holds the string denoting the comment field in the database.
	FieldComment = "comment"
	// FieldSuccessRule holds the string denoting the successrule field in the database.
	FieldSuccessRule = "success_rule"
	// FieldSuccessTarget holds the string denoting the successtarget field in the database.
	FieldSuccessTarget = "success_target"
	// FieldPrivate holds the string denoting the private field in the database.
	FieldPrivate = "private"
	// FieldRevealed holds the string denoting the revealed field in the database.
	FieldRevealed = "revealed"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// EdgeRoom holds the string denoting the room edge name in mutations.
	EdgeRoom = "room"
	// Table holds the table name of the roll in the database.
	Table = "rolls"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "rolls"
	// OwnerInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	OwnerInverseTable = "users"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "user_rolls"
	// RoomTable is the table that holds the room relation/edge.
	RoomTable = "rolls"
	// RoomInverseTable is the table name for the Room entity.
	// It exists in this package in order to avoid circular dependency with the "room" package.
	RoomInverseTable = "rooms"
	// RoomColumn is the table column denoting the room relation/edge.
	RoomColumn = "room_rolls"
)

// Columns holds all SQL columns for roll fields.
var Columns = []string{
	FieldID,
	FieldTstamp,
	FieldTime,
	FieldResult,
	FieldDiceColor,
	FieldDiceMaterial,
	FieldComment,
	FieldSuccessRule,
	FieldSuccessTarget,
	FieldPrivate,
	FieldRevealed,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "rolls"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"room_rolls",
	"user_rolls",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Roll queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTstamp orders the results by the tstamp field.
func ByTstamp(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTstamp, opts...).ToFunc()
}

// ByTime orders the results by the time field.
func ByTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTime, opts...).ToFunc()
}

// ByResult orders the results by the result field.
func ByResult(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResult, opts...).ToFunc()
}

// ByDiceColor orders the results by the diceColor field.
func ByDiceColor(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDiceColor, opts...).ToFunc()
}

// ByDiceMaterial orders the results by the diceMaterial field.
func ByDiceMaterial(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDiceMaterial, opts...).ToFunc()
}

// ByComment orders the results by the comment field.
func ByComment(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldComment, opts...).ToFunc()
}

// BySuccessRule orders the results by the successRule field.
func BySuccessRule(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSuccessRule, opts...).ToFunc()
}

// BySuccessTarget orders the results by the successTarget field.
func BySuccessTarget(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSuccessTarget, opts...).ToFunc()
}

// ByPrivate orders the results by the private field.
func ByPrivate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrivate, opts...).ToFunc()
}

// ByRevealed orders the results by the revealed field.
func ByRevealed(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRevealed, opts...).ToFunc()
}

// ByOwnerField orders the results by owner field.
func ByOwnerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnerStep(), sql.OrderByField(field, opts...))
	}
}

// ByRoomField orders the results by room field.
func ByRoomField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRoomStep(), sql.OrderByField(field, opts...))
	}
}
func newOwnerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
	)
}
func newRoomStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RoomInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, RoomTable, RoomColumn),
	)
}
