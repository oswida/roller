// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"rpgroll/ent/rolldef"
	"rpgroll/ent/user"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// RollDef is the model entity for the RollDef schema.
type RollDef struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Dice holds the value of the "dice" field.
	Dice string `json:"dice,omitempty"`
	// Modifier holds the value of the "modifier" field.
	Modifier int `json:"modifier,omitempty"`
	// SuccessRule holds the value of the "successRule" field.
	SuccessRule string `json:"successRule,omitempty"`
	// SuccessTarget holds the value of the "successTarget" field.
	SuccessTarget string `json:"successTarget,omitempty"`
	// Comment holds the value of the "comment" field.
	Comment string `json:"comment,omitempty"`
	// Shared holds the value of the "shared" field.
	Shared bool `json:"shared,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RollDefQuery when eager-loading is set.
	Edges         RollDefEdges `json:"edges"`
	user_rolldefs *string
	selectValues  sql.SelectValues
}

// RollDefEdges holds the relations/edges for other nodes in the graph.
type RollDefEdges struct {
	// Owner holds the value of the owner edge.
	Owner *User `json:"owner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RollDefEdges) OwnerOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Owner == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RollDef) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case rolldef.FieldShared:
			values[i] = new(sql.NullBool)
		case rolldef.FieldModifier:
			values[i] = new(sql.NullInt64)
		case rolldef.FieldID, rolldef.FieldName, rolldef.FieldDice, rolldef.FieldSuccessRule, rolldef.FieldSuccessTarget, rolldef.FieldComment:
			values[i] = new(sql.NullString)
		case rolldef.ForeignKeys[0]: // user_rolldefs
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RollDef fields.
func (rd *RollDef) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case rolldef.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				rd.ID = value.String
			}
		case rolldef.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				rd.Name = value.String
			}
		case rolldef.FieldDice:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dice", values[i])
			} else if value.Valid {
				rd.Dice = value.String
			}
		case rolldef.FieldModifier:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field modifier", values[i])
			} else if value.Valid {
				rd.Modifier = int(value.Int64)
			}
		case rolldef.FieldSuccessRule:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field successRule", values[i])
			} else if value.Valid {
				rd.SuccessRule = value.String
			}
		case rolldef.FieldSuccessTarget:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field successTarget", values[i])
			} else if value.Valid {
				rd.SuccessTarget = value.String
			}
		case rolldef.FieldComment:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field comment", values[i])
			} else if value.Valid {
				rd.Comment = value.String
			}
		case rolldef.FieldShared:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field shared", values[i])
			} else if value.Valid {
				rd.Shared = value.Bool
			}
		case rolldef.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_rolldefs", values[i])
			} else if value.Valid {
				rd.user_rolldefs = new(string)
				*rd.user_rolldefs = value.String
			}
		default:
			rd.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the RollDef.
// This includes values selected through modifiers, order, etc.
func (rd *RollDef) Value(name string) (ent.Value, error) {
	return rd.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the RollDef entity.
func (rd *RollDef) QueryOwner() *UserQuery {
	return NewRollDefClient(rd.config).QueryOwner(rd)
}

// Update returns a builder for updating this RollDef.
// Note that you need to call RollDef.Unwrap() before calling this method if this RollDef
// was returned from a transaction, and the transaction was committed or rolled back.
func (rd *RollDef) Update() *RollDefUpdateOne {
	return NewRollDefClient(rd.config).UpdateOne(rd)
}

// Unwrap unwraps the RollDef entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rd *RollDef) Unwrap() *RollDef {
	_tx, ok := rd.config.driver.(*txDriver)
	if !ok {
		panic("ent: RollDef is not a transactional entity")
	}
	rd.config.driver = _tx.drv
	return rd
}

// String implements the fmt.Stringer.
func (rd *RollDef) String() string {
	var builder strings.Builder
	builder.WriteString("RollDef(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rd.ID))
	builder.WriteString("name=")
	builder.WriteString(rd.Name)
	builder.WriteString(", ")
	builder.WriteString("dice=")
	builder.WriteString(rd.Dice)
	builder.WriteString(", ")
	builder.WriteString("modifier=")
	builder.WriteString(fmt.Sprintf("%v", rd.Modifier))
	builder.WriteString(", ")
	builder.WriteString("successRule=")
	builder.WriteString(rd.SuccessRule)
	builder.WriteString(", ")
	builder.WriteString("successTarget=")
	builder.WriteString(rd.SuccessTarget)
	builder.WriteString(", ")
	builder.WriteString("comment=")
	builder.WriteString(rd.Comment)
	builder.WriteString(", ")
	builder.WriteString("shared=")
	builder.WriteString(fmt.Sprintf("%v", rd.Shared))
	builder.WriteByte(')')
	return builder.String()
}

// RollDefs is a parsable slice of RollDef.
type RollDefs []*RollDef
