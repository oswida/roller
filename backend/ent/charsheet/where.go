// Code generated by ent, DO NOT EDIT.

package charsheet

import (
	"rpgroll/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Charsheet {
	return predicate.Charsheet(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Charsheet {
	return predicate.Charsheet(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Charsheet {
	return predicate.Charsheet(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Charsheet {
	return predicate.Charsheet(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Charsheet {
	return predicate.Charsheet(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Charsheet {
	return predicate.Charsheet(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Charsheet {
	return predicate.Charsheet(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Charsheet {
	return predicate.Charsheet(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Charsheet {
	return predicate.Charsheet(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Charsheet {
	return predicate.Charsheet(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Charsheet {
	return predicate.Charsheet(sql.FieldContainsFold(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Charsheet {
	return predicate.Charsheet(sql.FieldEQ(FieldName, v))
}

// Template applies equality check predicate on the "template" field. It's identical to TemplateEQ.
func Template(v string) predicate.Charsheet {
	return predicate.Charsheet(sql.FieldEQ(FieldTemplate, v))
}

// Shared applies equality check predicate on the "shared" field. It's identical to SharedEQ.
func Shared(v bool) predicate.Charsheet {
	return predicate.Charsheet(sql.FieldEQ(FieldShared, v))
}

// Portrait applies equality check predicate on the "portrait" field. It's identical to PortraitEQ.
func Portrait(v string) predicate.Charsheet {
	return predicate.Charsheet(sql.FieldEQ(FieldPortrait, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Charsheet {
	return predicate.Charsheet(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Charsheet {
	return predicate.Charsheet(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Charsheet {
	return predicate.Charsheet(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Charsheet {
	return predicate.Charsheet(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Charsheet {
	return predicate.Charsheet(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Charsheet {
	return predicate.Charsheet(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Charsheet {
	return predicate.Charsheet(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Charsheet {
	return predicate.Charsheet(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Charsheet {
	return predicate.Charsheet(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Charsheet {
	return predicate.Charsheet(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Charsheet {
	return predicate.Charsheet(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Charsheet {
	return predicate.Charsheet(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Charsheet {
	return predicate.Charsheet(sql.FieldContainsFold(FieldName, v))
}

// TemplateEQ applies the EQ predicate on the "template" field.
func TemplateEQ(v string) predicate.Charsheet {
	return predicate.Charsheet(sql.FieldEQ(FieldTemplate, v))
}

// TemplateNEQ applies the NEQ predicate on the "template" field.
func TemplateNEQ(v string) predicate.Charsheet {
	return predicate.Charsheet(sql.FieldNEQ(FieldTemplate, v))
}

// TemplateIn applies the In predicate on the "template" field.
func TemplateIn(vs ...string) predicate.Charsheet {
	return predicate.Charsheet(sql.FieldIn(FieldTemplate, vs...))
}

// TemplateNotIn applies the NotIn predicate on the "template" field.
func TemplateNotIn(vs ...string) predicate.Charsheet {
	return predicate.Charsheet(sql.FieldNotIn(FieldTemplate, vs...))
}

// TemplateGT applies the GT predicate on the "template" field.
func TemplateGT(v string) predicate.Charsheet {
	return predicate.Charsheet(sql.FieldGT(FieldTemplate, v))
}

// TemplateGTE applies the GTE predicate on the "template" field.
func TemplateGTE(v string) predicate.Charsheet {
	return predicate.Charsheet(sql.FieldGTE(FieldTemplate, v))
}

// TemplateLT applies the LT predicate on the "template" field.
func TemplateLT(v string) predicate.Charsheet {
	return predicate.Charsheet(sql.FieldLT(FieldTemplate, v))
}

// TemplateLTE applies the LTE predicate on the "template" field.
func TemplateLTE(v string) predicate.Charsheet {
	return predicate.Charsheet(sql.FieldLTE(FieldTemplate, v))
}

// TemplateContains applies the Contains predicate on the "template" field.
func TemplateContains(v string) predicate.Charsheet {
	return predicate.Charsheet(sql.FieldContains(FieldTemplate, v))
}

// TemplateHasPrefix applies the HasPrefix predicate on the "template" field.
func TemplateHasPrefix(v string) predicate.Charsheet {
	return predicate.Charsheet(sql.FieldHasPrefix(FieldTemplate, v))
}

// TemplateHasSuffix applies the HasSuffix predicate on the "template" field.
func TemplateHasSuffix(v string) predicate.Charsheet {
	return predicate.Charsheet(sql.FieldHasSuffix(FieldTemplate, v))
}

// TemplateEqualFold applies the EqualFold predicate on the "template" field.
func TemplateEqualFold(v string) predicate.Charsheet {
	return predicate.Charsheet(sql.FieldEqualFold(FieldTemplate, v))
}

// TemplateContainsFold applies the ContainsFold predicate on the "template" field.
func TemplateContainsFold(v string) predicate.Charsheet {
	return predicate.Charsheet(sql.FieldContainsFold(FieldTemplate, v))
}

// SharedEQ applies the EQ predicate on the "shared" field.
func SharedEQ(v bool) predicate.Charsheet {
	return predicate.Charsheet(sql.FieldEQ(FieldShared, v))
}

// SharedNEQ applies the NEQ predicate on the "shared" field.
func SharedNEQ(v bool) predicate.Charsheet {
	return predicate.Charsheet(sql.FieldNEQ(FieldShared, v))
}

// PortraitEQ applies the EQ predicate on the "portrait" field.
func PortraitEQ(v string) predicate.Charsheet {
	return predicate.Charsheet(sql.FieldEQ(FieldPortrait, v))
}

// PortraitNEQ applies the NEQ predicate on the "portrait" field.
func PortraitNEQ(v string) predicate.Charsheet {
	return predicate.Charsheet(sql.FieldNEQ(FieldPortrait, v))
}

// PortraitIn applies the In predicate on the "portrait" field.
func PortraitIn(vs ...string) predicate.Charsheet {
	return predicate.Charsheet(sql.FieldIn(FieldPortrait, vs...))
}

// PortraitNotIn applies the NotIn predicate on the "portrait" field.
func PortraitNotIn(vs ...string) predicate.Charsheet {
	return predicate.Charsheet(sql.FieldNotIn(FieldPortrait, vs...))
}

// PortraitGT applies the GT predicate on the "portrait" field.
func PortraitGT(v string) predicate.Charsheet {
	return predicate.Charsheet(sql.FieldGT(FieldPortrait, v))
}

// PortraitGTE applies the GTE predicate on the "portrait" field.
func PortraitGTE(v string) predicate.Charsheet {
	return predicate.Charsheet(sql.FieldGTE(FieldPortrait, v))
}

// PortraitLT applies the LT predicate on the "portrait" field.
func PortraitLT(v string) predicate.Charsheet {
	return predicate.Charsheet(sql.FieldLT(FieldPortrait, v))
}

// PortraitLTE applies the LTE predicate on the "portrait" field.
func PortraitLTE(v string) predicate.Charsheet {
	return predicate.Charsheet(sql.FieldLTE(FieldPortrait, v))
}

// PortraitContains applies the Contains predicate on the "portrait" field.
func PortraitContains(v string) predicate.Charsheet {
	return predicate.Charsheet(sql.FieldContains(FieldPortrait, v))
}

// PortraitHasPrefix applies the HasPrefix predicate on the "portrait" field.
func PortraitHasPrefix(v string) predicate.Charsheet {
	return predicate.Charsheet(sql.FieldHasPrefix(FieldPortrait, v))
}

// PortraitHasSuffix applies the HasSuffix predicate on the "portrait" field.
func PortraitHasSuffix(v string) predicate.Charsheet {
	return predicate.Charsheet(sql.FieldHasSuffix(FieldPortrait, v))
}

// PortraitEqualFold applies the EqualFold predicate on the "portrait" field.
func PortraitEqualFold(v string) predicate.Charsheet {
	return predicate.Charsheet(sql.FieldEqualFold(FieldPortrait, v))
}

// PortraitContainsFold applies the ContainsFold predicate on the "portrait" field.
func PortraitContainsFold(v string) predicate.Charsheet {
	return predicate.Charsheet(sql.FieldContainsFold(FieldPortrait, v))
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.Charsheet {
	return predicate.Charsheet(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.User) predicate.Charsheet {
	return predicate.Charsheet(func(s *sql.Selector) {
		step := newOwnerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Charsheet) predicate.Charsheet {
	return predicate.Charsheet(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Charsheet) predicate.Charsheet {
	return predicate.Charsheet(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Charsheet) predicate.Charsheet {
	return predicate.Charsheet(func(s *sql.Selector) {
		p(s.Not())
	})
}
