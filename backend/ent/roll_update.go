// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"rpgroll/ent/predicate"
	"rpgroll/ent/roll"
	"rpgroll/ent/room"
	"rpgroll/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RollUpdate is the builder for updating Roll entities.
type RollUpdate struct {
	config
	hooks    []Hook
	mutation *RollMutation
}

// Where appends a list predicates to the RollUpdate builder.
func (ru *RollUpdate) Where(ps ...predicate.Roll) *RollUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetTstamp sets the "tstamp" field.
func (ru *RollUpdate) SetTstamp(s string) *RollUpdate {
	ru.mutation.SetTstamp(s)
	return ru
}

// SetTime sets the "time" field.
func (ru *RollUpdate) SetTime(t time.Time) *RollUpdate {
	ru.mutation.SetTime(t)
	return ru
}

// SetResult sets the "result" field.
func (ru *RollUpdate) SetResult(s string) *RollUpdate {
	ru.mutation.SetResult(s)
	return ru
}

// SetDiceColor sets the "diceColor" field.
func (ru *RollUpdate) SetDiceColor(s string) *RollUpdate {
	ru.mutation.SetDiceColor(s)
	return ru
}

// SetDiceMaterial sets the "diceMaterial" field.
func (ru *RollUpdate) SetDiceMaterial(s string) *RollUpdate {
	ru.mutation.SetDiceMaterial(s)
	return ru
}

// SetComment sets the "comment" field.
func (ru *RollUpdate) SetComment(s string) *RollUpdate {
	ru.mutation.SetComment(s)
	return ru
}

// SetSuccessRule sets the "successRule" field.
func (ru *RollUpdate) SetSuccessRule(s string) *RollUpdate {
	ru.mutation.SetSuccessRule(s)
	return ru
}

// SetSuccessTarget sets the "successTarget" field.
func (ru *RollUpdate) SetSuccessTarget(i int) *RollUpdate {
	ru.mutation.ResetSuccessTarget()
	ru.mutation.SetSuccessTarget(i)
	return ru
}

// AddSuccessTarget adds i to the "successTarget" field.
func (ru *RollUpdate) AddSuccessTarget(i int) *RollUpdate {
	ru.mutation.AddSuccessTarget(i)
	return ru
}

// SetPrivate sets the "private" field.
func (ru *RollUpdate) SetPrivate(b bool) *RollUpdate {
	ru.mutation.SetPrivate(b)
	return ru
}

// SetRevealed sets the "revealed" field.
func (ru *RollUpdate) SetRevealed(b bool) *RollUpdate {
	ru.mutation.SetRevealed(b)
	return ru
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (ru *RollUpdate) SetOwnerID(id string) *RollUpdate {
	ru.mutation.SetOwnerID(id)
	return ru
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (ru *RollUpdate) SetNillableOwnerID(id *string) *RollUpdate {
	if id != nil {
		ru = ru.SetOwnerID(*id)
	}
	return ru
}

// SetOwner sets the "owner" edge to the User entity.
func (ru *RollUpdate) SetOwner(u *User) *RollUpdate {
	return ru.SetOwnerID(u.ID)
}

// SetRoomID sets the "room" edge to the Room entity by ID.
func (ru *RollUpdate) SetRoomID(id string) *RollUpdate {
	ru.mutation.SetRoomID(id)
	return ru
}

// SetNillableRoomID sets the "room" edge to the Room entity by ID if the given value is not nil.
func (ru *RollUpdate) SetNillableRoomID(id *string) *RollUpdate {
	if id != nil {
		ru = ru.SetRoomID(*id)
	}
	return ru
}

// SetRoom sets the "room" edge to the Room entity.
func (ru *RollUpdate) SetRoom(r *Room) *RollUpdate {
	return ru.SetRoomID(r.ID)
}

// Mutation returns the RollMutation object of the builder.
func (ru *RollUpdate) Mutation() *RollMutation {
	return ru.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (ru *RollUpdate) ClearOwner() *RollUpdate {
	ru.mutation.ClearOwner()
	return ru
}

// ClearRoom clears the "room" edge to the Room entity.
func (ru *RollUpdate) ClearRoom() *RollUpdate {
	ru.mutation.ClearRoom()
	return ru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RollUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RollUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RollUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RollUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ru *RollUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(roll.Table, roll.Columns, sqlgraph.NewFieldSpec(roll.FieldID, field.TypeString))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.Tstamp(); ok {
		_spec.SetField(roll.FieldTstamp, field.TypeString, value)
	}
	if value, ok := ru.mutation.Time(); ok {
		_spec.SetField(roll.FieldTime, field.TypeTime, value)
	}
	if value, ok := ru.mutation.Result(); ok {
		_spec.SetField(roll.FieldResult, field.TypeString, value)
	}
	if value, ok := ru.mutation.DiceColor(); ok {
		_spec.SetField(roll.FieldDiceColor, field.TypeString, value)
	}
	if value, ok := ru.mutation.DiceMaterial(); ok {
		_spec.SetField(roll.FieldDiceMaterial, field.TypeString, value)
	}
	if value, ok := ru.mutation.Comment(); ok {
		_spec.SetField(roll.FieldComment, field.TypeString, value)
	}
	if value, ok := ru.mutation.SuccessRule(); ok {
		_spec.SetField(roll.FieldSuccessRule, field.TypeString, value)
	}
	if value, ok := ru.mutation.SuccessTarget(); ok {
		_spec.SetField(roll.FieldSuccessTarget, field.TypeInt, value)
	}
	if value, ok := ru.mutation.AddedSuccessTarget(); ok {
		_spec.AddField(roll.FieldSuccessTarget, field.TypeInt, value)
	}
	if value, ok := ru.mutation.Private(); ok {
		_spec.SetField(roll.FieldPrivate, field.TypeBool, value)
	}
	if value, ok := ru.mutation.Revealed(); ok {
		_spec.SetField(roll.FieldRevealed, field.TypeBool, value)
	}
	if ru.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roll.OwnerTable,
			Columns: []string{roll.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roll.OwnerTable,
			Columns: []string{roll.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.RoomCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roll.RoomTable,
			Columns: []string{roll.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RoomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roll.RoomTable,
			Columns: []string{roll.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{roll.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// RollUpdateOne is the builder for updating a single Roll entity.
type RollUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RollMutation
}

// SetTstamp sets the "tstamp" field.
func (ruo *RollUpdateOne) SetTstamp(s string) *RollUpdateOne {
	ruo.mutation.SetTstamp(s)
	return ruo
}

// SetTime sets the "time" field.
func (ruo *RollUpdateOne) SetTime(t time.Time) *RollUpdateOne {
	ruo.mutation.SetTime(t)
	return ruo
}

// SetResult sets the "result" field.
func (ruo *RollUpdateOne) SetResult(s string) *RollUpdateOne {
	ruo.mutation.SetResult(s)
	return ruo
}

// SetDiceColor sets the "diceColor" field.
func (ruo *RollUpdateOne) SetDiceColor(s string) *RollUpdateOne {
	ruo.mutation.SetDiceColor(s)
	return ruo
}

// SetDiceMaterial sets the "diceMaterial" field.
func (ruo *RollUpdateOne) SetDiceMaterial(s string) *RollUpdateOne {
	ruo.mutation.SetDiceMaterial(s)
	return ruo
}

// SetComment sets the "comment" field.
func (ruo *RollUpdateOne) SetComment(s string) *RollUpdateOne {
	ruo.mutation.SetComment(s)
	return ruo
}

// SetSuccessRule sets the "successRule" field.
func (ruo *RollUpdateOne) SetSuccessRule(s string) *RollUpdateOne {
	ruo.mutation.SetSuccessRule(s)
	return ruo
}

// SetSuccessTarget sets the "successTarget" field.
func (ruo *RollUpdateOne) SetSuccessTarget(i int) *RollUpdateOne {
	ruo.mutation.ResetSuccessTarget()
	ruo.mutation.SetSuccessTarget(i)
	return ruo
}

// AddSuccessTarget adds i to the "successTarget" field.
func (ruo *RollUpdateOne) AddSuccessTarget(i int) *RollUpdateOne {
	ruo.mutation.AddSuccessTarget(i)
	return ruo
}

// SetPrivate sets the "private" field.
func (ruo *RollUpdateOne) SetPrivate(b bool) *RollUpdateOne {
	ruo.mutation.SetPrivate(b)
	return ruo
}

// SetRevealed sets the "revealed" field.
func (ruo *RollUpdateOne) SetRevealed(b bool) *RollUpdateOne {
	ruo.mutation.SetRevealed(b)
	return ruo
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (ruo *RollUpdateOne) SetOwnerID(id string) *RollUpdateOne {
	ruo.mutation.SetOwnerID(id)
	return ruo
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (ruo *RollUpdateOne) SetNillableOwnerID(id *string) *RollUpdateOne {
	if id != nil {
		ruo = ruo.SetOwnerID(*id)
	}
	return ruo
}

// SetOwner sets the "owner" edge to the User entity.
func (ruo *RollUpdateOne) SetOwner(u *User) *RollUpdateOne {
	return ruo.SetOwnerID(u.ID)
}

// SetRoomID sets the "room" edge to the Room entity by ID.
func (ruo *RollUpdateOne) SetRoomID(id string) *RollUpdateOne {
	ruo.mutation.SetRoomID(id)
	return ruo
}

// SetNillableRoomID sets the "room" edge to the Room entity by ID if the given value is not nil.
func (ruo *RollUpdateOne) SetNillableRoomID(id *string) *RollUpdateOne {
	if id != nil {
		ruo = ruo.SetRoomID(*id)
	}
	return ruo
}

// SetRoom sets the "room" edge to the Room entity.
func (ruo *RollUpdateOne) SetRoom(r *Room) *RollUpdateOne {
	return ruo.SetRoomID(r.ID)
}

// Mutation returns the RollMutation object of the builder.
func (ruo *RollUpdateOne) Mutation() *RollMutation {
	return ruo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (ruo *RollUpdateOne) ClearOwner() *RollUpdateOne {
	ruo.mutation.ClearOwner()
	return ruo
}

// ClearRoom clears the "room" edge to the Room entity.
func (ruo *RollUpdateOne) ClearRoom() *RollUpdateOne {
	ruo.mutation.ClearRoom()
	return ruo
}

// Where appends a list predicates to the RollUpdate builder.
func (ruo *RollUpdateOne) Where(ps ...predicate.Roll) *RollUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RollUpdateOne) Select(field string, fields ...string) *RollUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Roll entity.
func (ruo *RollUpdateOne) Save(ctx context.Context) (*Roll, error) {
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RollUpdateOne) SaveX(ctx context.Context) *Roll {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RollUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RollUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ruo *RollUpdateOne) sqlSave(ctx context.Context) (_node *Roll, err error) {
	_spec := sqlgraph.NewUpdateSpec(roll.Table, roll.Columns, sqlgraph.NewFieldSpec(roll.FieldID, field.TypeString))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Roll.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, roll.FieldID)
		for _, f := range fields {
			if !roll.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != roll.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.Tstamp(); ok {
		_spec.SetField(roll.FieldTstamp, field.TypeString, value)
	}
	if value, ok := ruo.mutation.Time(); ok {
		_spec.SetField(roll.FieldTime, field.TypeTime, value)
	}
	if value, ok := ruo.mutation.Result(); ok {
		_spec.SetField(roll.FieldResult, field.TypeString, value)
	}
	if value, ok := ruo.mutation.DiceColor(); ok {
		_spec.SetField(roll.FieldDiceColor, field.TypeString, value)
	}
	if value, ok := ruo.mutation.DiceMaterial(); ok {
		_spec.SetField(roll.FieldDiceMaterial, field.TypeString, value)
	}
	if value, ok := ruo.mutation.Comment(); ok {
		_spec.SetField(roll.FieldComment, field.TypeString, value)
	}
	if value, ok := ruo.mutation.SuccessRule(); ok {
		_spec.SetField(roll.FieldSuccessRule, field.TypeString, value)
	}
	if value, ok := ruo.mutation.SuccessTarget(); ok {
		_spec.SetField(roll.FieldSuccessTarget, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.AddedSuccessTarget(); ok {
		_spec.AddField(roll.FieldSuccessTarget, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.Private(); ok {
		_spec.SetField(roll.FieldPrivate, field.TypeBool, value)
	}
	if value, ok := ruo.mutation.Revealed(); ok {
		_spec.SetField(roll.FieldRevealed, field.TypeBool, value)
	}
	if ruo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roll.OwnerTable,
			Columns: []string{roll.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roll.OwnerTable,
			Columns: []string{roll.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.RoomCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roll.RoomTable,
			Columns: []string{roll.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RoomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roll.RoomTable,
			Columns: []string{roll.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Roll{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{roll.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
