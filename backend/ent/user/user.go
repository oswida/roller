// Code generated by ent, DO NOT EDIT.

package user

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldLogin holds the string denoting the login field in the database.
	FieldLogin = "login"
	// FieldPasswd holds the string denoting the passwd field in the database.
	FieldPasswd = "passwd"
	// FieldIsAdmin holds the string denoting the is_admin field in the database.
	FieldIsAdmin = "is_admin"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldColor holds the string denoting the color field in the database.
	FieldColor = "color"
	// FieldSettings holds the string denoting the settings field in the database.
	FieldSettings = "settings"
	// EdgeRooms holds the string denoting the rooms edge name in mutations.
	EdgeRooms = "rooms"
	// EdgeRolls holds the string denoting the rolls edge name in mutations.
	EdgeRolls = "rolls"
	// EdgeCharsheets holds the string denoting the charsheets edge name in mutations.
	EdgeCharsheets = "charsheets"
	// EdgeRolldefs holds the string denoting the rolldefs edge name in mutations.
	EdgeRolldefs = "rolldefs"
	// Table holds the table name of the user in the database.
	Table = "users"
	// RoomsTable is the table that holds the rooms relation/edge.
	RoomsTable = "rooms"
	// RoomsInverseTable is the table name for the Room entity.
	// It exists in this package in order to avoid circular dependency with the "room" package.
	RoomsInverseTable = "rooms"
	// RoomsColumn is the table column denoting the rooms relation/edge.
	RoomsColumn = "user_rooms"
	// RollsTable is the table that holds the rolls relation/edge.
	RollsTable = "rolls"
	// RollsInverseTable is the table name for the Roll entity.
	// It exists in this package in order to avoid circular dependency with the "roll" package.
	RollsInverseTable = "rolls"
	// RollsColumn is the table column denoting the rolls relation/edge.
	RollsColumn = "user_rolls"
	// CharsheetsTable is the table that holds the charsheets relation/edge.
	CharsheetsTable = "charsheets"
	// CharsheetsInverseTable is the table name for the Charsheet entity.
	// It exists in this package in order to avoid circular dependency with the "charsheet" package.
	CharsheetsInverseTable = "charsheets"
	// CharsheetsColumn is the table column denoting the charsheets relation/edge.
	CharsheetsColumn = "user_charsheets"
	// RolldefsTable is the table that holds the rolldefs relation/edge.
	RolldefsTable = "roll_defs"
	// RolldefsInverseTable is the table name for the RollDef entity.
	// It exists in this package in order to avoid circular dependency with the "rolldef" package.
	RolldefsInverseTable = "roll_defs"
	// RolldefsColumn is the table column denoting the rolldefs relation/edge.
	RolldefsColumn = "user_rolldefs"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldLogin,
	FieldPasswd,
	FieldIsAdmin,
	FieldName,
	FieldColor,
	FieldSettings,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultIsAdmin holds the default value on creation for the "is_admin" field.
	DefaultIsAdmin bool
)

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByLogin orders the results by the login field.
func ByLogin(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLogin, opts...).ToFunc()
}

// ByPasswd orders the results by the passwd field.
func ByPasswd(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPasswd, opts...).ToFunc()
}

// ByIsAdmin orders the results by the is_admin field.
func ByIsAdmin(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsAdmin, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByColor orders the results by the color field.
func ByColor(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldColor, opts...).ToFunc()
}

// ByRoomsCount orders the results by rooms count.
func ByRoomsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRoomsStep(), opts...)
	}
}

// ByRooms orders the results by rooms terms.
func ByRooms(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRoomsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRollsCount orders the results by rolls count.
func ByRollsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRollsStep(), opts...)
	}
}

// ByRolls orders the results by rolls terms.
func ByRolls(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRollsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCharsheetsCount orders the results by charsheets count.
func ByCharsheetsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCharsheetsStep(), opts...)
	}
}

// ByCharsheets orders the results by charsheets terms.
func ByCharsheets(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCharsheetsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRolldefsCount orders the results by rolldefs count.
func ByRolldefsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRolldefsStep(), opts...)
	}
}

// ByRolldefs orders the results by rolldefs terms.
func ByRolldefs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRolldefsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newRoomsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RoomsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RoomsTable, RoomsColumn),
	)
}
func newRollsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RollsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RollsTable, RollsColumn),
	)
}
func newCharsheetsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CharsheetsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CharsheetsTable, CharsheetsColumn),
	)
}
func newRolldefsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RolldefsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RolldefsTable, RolldefsColumn),
	)
}
