// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"rpgroll/ent/predicate"
	"rpgroll/ent/rolldef"
	"rpgroll/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// RollDefUpdate is the builder for updating RollDef entities.
type RollDefUpdate struct {
	config
	hooks    []Hook
	mutation *RollDefMutation
}

// Where appends a list predicates to the RollDefUpdate builder.
func (rdu *RollDefUpdate) Where(ps ...predicate.RollDef) *RollDefUpdate {
	rdu.mutation.Where(ps...)
	return rdu
}

// SetName sets the "name" field.
func (rdu *RollDefUpdate) SetName(s string) *RollDefUpdate {
	rdu.mutation.SetName(s)
	return rdu
}

// SetDice sets the "dice" field.
func (rdu *RollDefUpdate) SetDice(s string) *RollDefUpdate {
	rdu.mutation.SetDice(s)
	return rdu
}

// SetModifier sets the "modifier" field.
func (rdu *RollDefUpdate) SetModifier(i int) *RollDefUpdate {
	rdu.mutation.ResetModifier()
	rdu.mutation.SetModifier(i)
	return rdu
}

// AddModifier adds i to the "modifier" field.
func (rdu *RollDefUpdate) AddModifier(i int) *RollDefUpdate {
	rdu.mutation.AddModifier(i)
	return rdu
}

// SetSuccessRule sets the "successRule" field.
func (rdu *RollDefUpdate) SetSuccessRule(s string) *RollDefUpdate {
	rdu.mutation.SetSuccessRule(s)
	return rdu
}

// SetSuccessTarget sets the "successTarget" field.
func (rdu *RollDefUpdate) SetSuccessTarget(s string) *RollDefUpdate {
	rdu.mutation.SetSuccessTarget(s)
	return rdu
}

// SetComment sets the "comment" field.
func (rdu *RollDefUpdate) SetComment(s string) *RollDefUpdate {
	rdu.mutation.SetComment(s)
	return rdu
}

// SetShared sets the "shared" field.
func (rdu *RollDefUpdate) SetShared(b bool) *RollDefUpdate {
	rdu.mutation.SetShared(b)
	return rdu
}

// SetNillableShared sets the "shared" field if the given value is not nil.
func (rdu *RollDefUpdate) SetNillableShared(b *bool) *RollDefUpdate {
	if b != nil {
		rdu.SetShared(*b)
	}
	return rdu
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (rdu *RollDefUpdate) SetOwnerID(id uuid.UUID) *RollDefUpdate {
	rdu.mutation.SetOwnerID(id)
	return rdu
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (rdu *RollDefUpdate) SetNillableOwnerID(id *uuid.UUID) *RollDefUpdate {
	if id != nil {
		rdu = rdu.SetOwnerID(*id)
	}
	return rdu
}

// SetOwner sets the "owner" edge to the User entity.
func (rdu *RollDefUpdate) SetOwner(u *User) *RollDefUpdate {
	return rdu.SetOwnerID(u.ID)
}

// Mutation returns the RollDefMutation object of the builder.
func (rdu *RollDefUpdate) Mutation() *RollDefMutation {
	return rdu.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (rdu *RollDefUpdate) ClearOwner() *RollDefUpdate {
	rdu.mutation.ClearOwner()
	return rdu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rdu *RollDefUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, rdu.sqlSave, rdu.mutation, rdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rdu *RollDefUpdate) SaveX(ctx context.Context) int {
	affected, err := rdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rdu *RollDefUpdate) Exec(ctx context.Context) error {
	_, err := rdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rdu *RollDefUpdate) ExecX(ctx context.Context) {
	if err := rdu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rdu *RollDefUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(rolldef.Table, rolldef.Columns, sqlgraph.NewFieldSpec(rolldef.FieldID, field.TypeString))
	if ps := rdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rdu.mutation.Name(); ok {
		_spec.SetField(rolldef.FieldName, field.TypeString, value)
	}
	if value, ok := rdu.mutation.Dice(); ok {
		_spec.SetField(rolldef.FieldDice, field.TypeString, value)
	}
	if value, ok := rdu.mutation.Modifier(); ok {
		_spec.SetField(rolldef.FieldModifier, field.TypeInt, value)
	}
	if value, ok := rdu.mutation.AddedModifier(); ok {
		_spec.AddField(rolldef.FieldModifier, field.TypeInt, value)
	}
	if value, ok := rdu.mutation.SuccessRule(); ok {
		_spec.SetField(rolldef.FieldSuccessRule, field.TypeString, value)
	}
	if value, ok := rdu.mutation.SuccessTarget(); ok {
		_spec.SetField(rolldef.FieldSuccessTarget, field.TypeString, value)
	}
	if value, ok := rdu.mutation.Comment(); ok {
		_spec.SetField(rolldef.FieldComment, field.TypeString, value)
	}
	if value, ok := rdu.mutation.Shared(); ok {
		_spec.SetField(rolldef.FieldShared, field.TypeBool, value)
	}
	if rdu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rolldef.OwnerTable,
			Columns: []string{rolldef.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rdu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rolldef.OwnerTable,
			Columns: []string{rolldef.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rolldef.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rdu.mutation.done = true
	return n, nil
}

// RollDefUpdateOne is the builder for updating a single RollDef entity.
type RollDefUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RollDefMutation
}

// SetName sets the "name" field.
func (rduo *RollDefUpdateOne) SetName(s string) *RollDefUpdateOne {
	rduo.mutation.SetName(s)
	return rduo
}

// SetDice sets the "dice" field.
func (rduo *RollDefUpdateOne) SetDice(s string) *RollDefUpdateOne {
	rduo.mutation.SetDice(s)
	return rduo
}

// SetModifier sets the "modifier" field.
func (rduo *RollDefUpdateOne) SetModifier(i int) *RollDefUpdateOne {
	rduo.mutation.ResetModifier()
	rduo.mutation.SetModifier(i)
	return rduo
}

// AddModifier adds i to the "modifier" field.
func (rduo *RollDefUpdateOne) AddModifier(i int) *RollDefUpdateOne {
	rduo.mutation.AddModifier(i)
	return rduo
}

// SetSuccessRule sets the "successRule" field.
func (rduo *RollDefUpdateOne) SetSuccessRule(s string) *RollDefUpdateOne {
	rduo.mutation.SetSuccessRule(s)
	return rduo
}

// SetSuccessTarget sets the "successTarget" field.
func (rduo *RollDefUpdateOne) SetSuccessTarget(s string) *RollDefUpdateOne {
	rduo.mutation.SetSuccessTarget(s)
	return rduo
}

// SetComment sets the "comment" field.
func (rduo *RollDefUpdateOne) SetComment(s string) *RollDefUpdateOne {
	rduo.mutation.SetComment(s)
	return rduo
}

// SetShared sets the "shared" field.
func (rduo *RollDefUpdateOne) SetShared(b bool) *RollDefUpdateOne {
	rduo.mutation.SetShared(b)
	return rduo
}

// SetNillableShared sets the "shared" field if the given value is not nil.
func (rduo *RollDefUpdateOne) SetNillableShared(b *bool) *RollDefUpdateOne {
	if b != nil {
		rduo.SetShared(*b)
	}
	return rduo
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (rduo *RollDefUpdateOne) SetOwnerID(id uuid.UUID) *RollDefUpdateOne {
	rduo.mutation.SetOwnerID(id)
	return rduo
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (rduo *RollDefUpdateOne) SetNillableOwnerID(id *uuid.UUID) *RollDefUpdateOne {
	if id != nil {
		rduo = rduo.SetOwnerID(*id)
	}
	return rduo
}

// SetOwner sets the "owner" edge to the User entity.
func (rduo *RollDefUpdateOne) SetOwner(u *User) *RollDefUpdateOne {
	return rduo.SetOwnerID(u.ID)
}

// Mutation returns the RollDefMutation object of the builder.
func (rduo *RollDefUpdateOne) Mutation() *RollDefMutation {
	return rduo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (rduo *RollDefUpdateOne) ClearOwner() *RollDefUpdateOne {
	rduo.mutation.ClearOwner()
	return rduo
}

// Where appends a list predicates to the RollDefUpdate builder.
func (rduo *RollDefUpdateOne) Where(ps ...predicate.RollDef) *RollDefUpdateOne {
	rduo.mutation.Where(ps...)
	return rduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rduo *RollDefUpdateOne) Select(field string, fields ...string) *RollDefUpdateOne {
	rduo.fields = append([]string{field}, fields...)
	return rduo
}

// Save executes the query and returns the updated RollDef entity.
func (rduo *RollDefUpdateOne) Save(ctx context.Context) (*RollDef, error) {
	return withHooks(ctx, rduo.sqlSave, rduo.mutation, rduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rduo *RollDefUpdateOne) SaveX(ctx context.Context) *RollDef {
	node, err := rduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rduo *RollDefUpdateOne) Exec(ctx context.Context) error {
	_, err := rduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rduo *RollDefUpdateOne) ExecX(ctx context.Context) {
	if err := rduo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rduo *RollDefUpdateOne) sqlSave(ctx context.Context) (_node *RollDef, err error) {
	_spec := sqlgraph.NewUpdateSpec(rolldef.Table, rolldef.Columns, sqlgraph.NewFieldSpec(rolldef.FieldID, field.TypeString))
	id, ok := rduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RollDef.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, rolldef.FieldID)
		for _, f := range fields {
			if !rolldef.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != rolldef.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rduo.mutation.Name(); ok {
		_spec.SetField(rolldef.FieldName, field.TypeString, value)
	}
	if value, ok := rduo.mutation.Dice(); ok {
		_spec.SetField(rolldef.FieldDice, field.TypeString, value)
	}
	if value, ok := rduo.mutation.Modifier(); ok {
		_spec.SetField(rolldef.FieldModifier, field.TypeInt, value)
	}
	if value, ok := rduo.mutation.AddedModifier(); ok {
		_spec.AddField(rolldef.FieldModifier, field.TypeInt, value)
	}
	if value, ok := rduo.mutation.SuccessRule(); ok {
		_spec.SetField(rolldef.FieldSuccessRule, field.TypeString, value)
	}
	if value, ok := rduo.mutation.SuccessTarget(); ok {
		_spec.SetField(rolldef.FieldSuccessTarget, field.TypeString, value)
	}
	if value, ok := rduo.mutation.Comment(); ok {
		_spec.SetField(rolldef.FieldComment, field.TypeString, value)
	}
	if value, ok := rduo.mutation.Shared(); ok {
		_spec.SetField(rolldef.FieldShared, field.TypeBool, value)
	}
	if rduo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rolldef.OwnerTable,
			Columns: []string{rolldef.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rduo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rolldef.OwnerTable,
			Columns: []string{rolldef.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &RollDef{config: rduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rolldef.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rduo.mutation.done = true
	return _node, nil
}
