// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"rpgroll/ent/roll"
	"rpgroll/ent/room"
	"rpgroll/ent/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// RollCreate is the builder for creating a Roll entity.
type RollCreate struct {
	config
	mutation *RollMutation
	hooks    []Hook
}

// SetTstamp sets the "tstamp" field.
func (rc *RollCreate) SetTstamp(s string) *RollCreate {
	rc.mutation.SetTstamp(s)
	return rc
}

// SetTime sets the "time" field.
func (rc *RollCreate) SetTime(t time.Time) *RollCreate {
	rc.mutation.SetTime(t)
	return rc
}

// SetResult sets the "result" field.
func (rc *RollCreate) SetResult(s string) *RollCreate {
	rc.mutation.SetResult(s)
	return rc
}

// SetDiceColor sets the "diceColor" field.
func (rc *RollCreate) SetDiceColor(s string) *RollCreate {
	rc.mutation.SetDiceColor(s)
	return rc
}

// SetDiceMaterial sets the "diceMaterial" field.
func (rc *RollCreate) SetDiceMaterial(s string) *RollCreate {
	rc.mutation.SetDiceMaterial(s)
	return rc
}

// SetComment sets the "comment" field.
func (rc *RollCreate) SetComment(s string) *RollCreate {
	rc.mutation.SetComment(s)
	return rc
}

// SetSuccessRule sets the "successRule" field.
func (rc *RollCreate) SetSuccessRule(s string) *RollCreate {
	rc.mutation.SetSuccessRule(s)
	return rc
}

// SetSuccessTarget sets the "successTarget" field.
func (rc *RollCreate) SetSuccessTarget(i int) *RollCreate {
	rc.mutation.SetSuccessTarget(i)
	return rc
}

// SetPrivate sets the "private" field.
func (rc *RollCreate) SetPrivate(b bool) *RollCreate {
	rc.mutation.SetPrivate(b)
	return rc
}

// SetRevealed sets the "revealed" field.
func (rc *RollCreate) SetRevealed(b bool) *RollCreate {
	rc.mutation.SetRevealed(b)
	return rc
}

// SetID sets the "id" field.
func (rc *RollCreate) SetID(s string) *RollCreate {
	rc.mutation.SetID(s)
	return rc
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (rc *RollCreate) SetOwnerID(id uuid.UUID) *RollCreate {
	rc.mutation.SetOwnerID(id)
	return rc
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (rc *RollCreate) SetNillableOwnerID(id *uuid.UUID) *RollCreate {
	if id != nil {
		rc = rc.SetOwnerID(*id)
	}
	return rc
}

// SetOwner sets the "owner" edge to the User entity.
func (rc *RollCreate) SetOwner(u *User) *RollCreate {
	return rc.SetOwnerID(u.ID)
}

// SetRoomID sets the "room" edge to the Room entity by ID.
func (rc *RollCreate) SetRoomID(id uuid.UUID) *RollCreate {
	rc.mutation.SetRoomID(id)
	return rc
}

// SetNillableRoomID sets the "room" edge to the Room entity by ID if the given value is not nil.
func (rc *RollCreate) SetNillableRoomID(id *uuid.UUID) *RollCreate {
	if id != nil {
		rc = rc.SetRoomID(*id)
	}
	return rc
}

// SetRoom sets the "room" edge to the Room entity.
func (rc *RollCreate) SetRoom(r *Room) *RollCreate {
	return rc.SetRoomID(r.ID)
}

// Mutation returns the RollMutation object of the builder.
func (rc *RollCreate) Mutation() *RollMutation {
	return rc.mutation
}

// Save creates the Roll in the database.
func (rc *RollCreate) Save(ctx context.Context) (*Roll, error) {
	return withHooks(ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RollCreate) SaveX(ctx context.Context) *Roll {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *RollCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *RollCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *RollCreate) check() error {
	if _, ok := rc.mutation.Tstamp(); !ok {
		return &ValidationError{Name: "tstamp", err: errors.New(`ent: missing required field "Roll.tstamp"`)}
	}
	if _, ok := rc.mutation.Time(); !ok {
		return &ValidationError{Name: "time", err: errors.New(`ent: missing required field "Roll.time"`)}
	}
	if _, ok := rc.mutation.Result(); !ok {
		return &ValidationError{Name: "result", err: errors.New(`ent: missing required field "Roll.result"`)}
	}
	if _, ok := rc.mutation.DiceColor(); !ok {
		return &ValidationError{Name: "diceColor", err: errors.New(`ent: missing required field "Roll.diceColor"`)}
	}
	if _, ok := rc.mutation.DiceMaterial(); !ok {
		return &ValidationError{Name: "diceMaterial", err: errors.New(`ent: missing required field "Roll.diceMaterial"`)}
	}
	if _, ok := rc.mutation.Comment(); !ok {
		return &ValidationError{Name: "comment", err: errors.New(`ent: missing required field "Roll.comment"`)}
	}
	if _, ok := rc.mutation.SuccessRule(); !ok {
		return &ValidationError{Name: "successRule", err: errors.New(`ent: missing required field "Roll.successRule"`)}
	}
	if _, ok := rc.mutation.SuccessTarget(); !ok {
		return &ValidationError{Name: "successTarget", err: errors.New(`ent: missing required field "Roll.successTarget"`)}
	}
	if _, ok := rc.mutation.Private(); !ok {
		return &ValidationError{Name: "private", err: errors.New(`ent: missing required field "Roll.private"`)}
	}
	if _, ok := rc.mutation.Revealed(); !ok {
		return &ValidationError{Name: "revealed", err: errors.New(`ent: missing required field "Roll.revealed"`)}
	}
	return nil
}

func (rc *RollCreate) sqlSave(ctx context.Context) (*Roll, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Roll.ID type: %T", _spec.ID.Value)
		}
	}
	rc.mutation.id = &_node.ID
	rc.mutation.done = true
	return _node, nil
}

func (rc *RollCreate) createSpec() (*Roll, *sqlgraph.CreateSpec) {
	var (
		_node = &Roll{config: rc.config}
		_spec = sqlgraph.NewCreateSpec(roll.Table, sqlgraph.NewFieldSpec(roll.FieldID, field.TypeString))
	)
	if id, ok := rc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := rc.mutation.Tstamp(); ok {
		_spec.SetField(roll.FieldTstamp, field.TypeString, value)
		_node.Tstamp = value
	}
	if value, ok := rc.mutation.Time(); ok {
		_spec.SetField(roll.FieldTime, field.TypeTime, value)
		_node.Time = value
	}
	if value, ok := rc.mutation.Result(); ok {
		_spec.SetField(roll.FieldResult, field.TypeString, value)
		_node.Result = value
	}
	if value, ok := rc.mutation.DiceColor(); ok {
		_spec.SetField(roll.FieldDiceColor, field.TypeString, value)
		_node.DiceColor = value
	}
	if value, ok := rc.mutation.DiceMaterial(); ok {
		_spec.SetField(roll.FieldDiceMaterial, field.TypeString, value)
		_node.DiceMaterial = value
	}
	if value, ok := rc.mutation.Comment(); ok {
		_spec.SetField(roll.FieldComment, field.TypeString, value)
		_node.Comment = value
	}
	if value, ok := rc.mutation.SuccessRule(); ok {
		_spec.SetField(roll.FieldSuccessRule, field.TypeString, value)
		_node.SuccessRule = value
	}
	if value, ok := rc.mutation.SuccessTarget(); ok {
		_spec.SetField(roll.FieldSuccessTarget, field.TypeInt, value)
		_node.SuccessTarget = value
	}
	if value, ok := rc.mutation.Private(); ok {
		_spec.SetField(roll.FieldPrivate, field.TypeBool, value)
		_node.Private = value
	}
	if value, ok := rc.mutation.Revealed(); ok {
		_spec.SetField(roll.FieldRevealed, field.TypeBool, value)
		_node.Revealed = value
	}
	if nodes := rc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roll.OwnerTable,
			Columns: []string{roll.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_rolls = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.RoomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roll.RoomTable,
			Columns: []string{roll.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.room_rolls = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RollCreateBulk is the builder for creating many Roll entities in bulk.
type RollCreateBulk struct {
	config
	builders []*RollCreate
}

// Save creates the Roll entities in the database.
func (rcb *RollCreateBulk) Save(ctx context.Context) ([]*Roll, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Roll, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RollMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *RollCreateBulk) SaveX(ctx context.Context) []*Roll {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *RollCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *RollCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}
