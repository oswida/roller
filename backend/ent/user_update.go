// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"rpgroll/ent/charsheet"
	"rpgroll/ent/predicate"
	"rpgroll/ent/roll"
	"rpgroll/ent/rolldef"
	"rpgroll/ent/room"
	"rpgroll/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetLogin sets the "login" field.
func (uu *UserUpdate) SetLogin(s string) *UserUpdate {
	uu.mutation.SetLogin(s)
	return uu
}

// SetPasswd sets the "passwd" field.
func (uu *UserUpdate) SetPasswd(s string) *UserUpdate {
	uu.mutation.SetPasswd(s)
	return uu
}

// SetIsAdmin sets the "is_admin" field.
func (uu *UserUpdate) SetIsAdmin(b bool) *UserUpdate {
	uu.mutation.SetIsAdmin(b)
	return uu
}

// SetNillableIsAdmin sets the "is_admin" field if the given value is not nil.
func (uu *UserUpdate) SetNillableIsAdmin(b *bool) *UserUpdate {
	if b != nil {
		uu.SetIsAdmin(*b)
	}
	return uu
}

// SetName sets the "name" field.
func (uu *UserUpdate) SetName(s string) *UserUpdate {
	uu.mutation.SetName(s)
	return uu
}

// SetColor sets the "color" field.
func (uu *UserUpdate) SetColor(s string) *UserUpdate {
	uu.mutation.SetColor(s)
	return uu
}

// SetSettings sets the "settings" field.
func (uu *UserUpdate) SetSettings(m map[string]interface{}) *UserUpdate {
	uu.mutation.SetSettings(m)
	return uu
}

// AddRoomIDs adds the "rooms" edge to the Room entity by IDs.
func (uu *UserUpdate) AddRoomIDs(ids ...string) *UserUpdate {
	uu.mutation.AddRoomIDs(ids...)
	return uu
}

// AddRooms adds the "rooms" edges to the Room entity.
func (uu *UserUpdate) AddRooms(r ...*Room) *UserUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uu.AddRoomIDs(ids...)
}

// AddRollIDs adds the "rolls" edge to the Roll entity by IDs.
func (uu *UserUpdate) AddRollIDs(ids ...string) *UserUpdate {
	uu.mutation.AddRollIDs(ids...)
	return uu
}

// AddRolls adds the "rolls" edges to the Roll entity.
func (uu *UserUpdate) AddRolls(r ...*Roll) *UserUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uu.AddRollIDs(ids...)
}

// AddCharsheetIDs adds the "charsheets" edge to the Charsheet entity by IDs.
func (uu *UserUpdate) AddCharsheetIDs(ids ...string) *UserUpdate {
	uu.mutation.AddCharsheetIDs(ids...)
	return uu
}

// AddCharsheets adds the "charsheets" edges to the Charsheet entity.
func (uu *UserUpdate) AddCharsheets(c ...*Charsheet) *UserUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.AddCharsheetIDs(ids...)
}

// AddRolldefIDs adds the "rolldefs" edge to the RollDef entity by IDs.
func (uu *UserUpdate) AddRolldefIDs(ids ...string) *UserUpdate {
	uu.mutation.AddRolldefIDs(ids...)
	return uu
}

// AddRolldefs adds the "rolldefs" edges to the RollDef entity.
func (uu *UserUpdate) AddRolldefs(r ...*RollDef) *UserUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uu.AddRolldefIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearRooms clears all "rooms" edges to the Room entity.
func (uu *UserUpdate) ClearRooms() *UserUpdate {
	uu.mutation.ClearRooms()
	return uu
}

// RemoveRoomIDs removes the "rooms" edge to Room entities by IDs.
func (uu *UserUpdate) RemoveRoomIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveRoomIDs(ids...)
	return uu
}

// RemoveRooms removes "rooms" edges to Room entities.
func (uu *UserUpdate) RemoveRooms(r ...*Room) *UserUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uu.RemoveRoomIDs(ids...)
}

// ClearRolls clears all "rolls" edges to the Roll entity.
func (uu *UserUpdate) ClearRolls() *UserUpdate {
	uu.mutation.ClearRolls()
	return uu
}

// RemoveRollIDs removes the "rolls" edge to Roll entities by IDs.
func (uu *UserUpdate) RemoveRollIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveRollIDs(ids...)
	return uu
}

// RemoveRolls removes "rolls" edges to Roll entities.
func (uu *UserUpdate) RemoveRolls(r ...*Roll) *UserUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uu.RemoveRollIDs(ids...)
}

// ClearCharsheets clears all "charsheets" edges to the Charsheet entity.
func (uu *UserUpdate) ClearCharsheets() *UserUpdate {
	uu.mutation.ClearCharsheets()
	return uu
}

// RemoveCharsheetIDs removes the "charsheets" edge to Charsheet entities by IDs.
func (uu *UserUpdate) RemoveCharsheetIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveCharsheetIDs(ids...)
	return uu
}

// RemoveCharsheets removes "charsheets" edges to Charsheet entities.
func (uu *UserUpdate) RemoveCharsheets(c ...*Charsheet) *UserUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.RemoveCharsheetIDs(ids...)
}

// ClearRolldefs clears all "rolldefs" edges to the RollDef entity.
func (uu *UserUpdate) ClearRolldefs() *UserUpdate {
	uu.mutation.ClearRolldefs()
	return uu
}

// RemoveRolldefIDs removes the "rolldefs" edge to RollDef entities by IDs.
func (uu *UserUpdate) RemoveRolldefIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveRolldefIDs(ids...)
	return uu
}

// RemoveRolldefs removes "rolldefs" edges to RollDef entities.
func (uu *UserUpdate) RemoveRolldefs(r ...*RollDef) *UserUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uu.RemoveRolldefIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.Login(); ok {
		_spec.SetField(user.FieldLogin, field.TypeString, value)
	}
	if value, ok := uu.mutation.Passwd(); ok {
		_spec.SetField(user.FieldPasswd, field.TypeString, value)
	}
	if value, ok := uu.mutation.IsAdmin(); ok {
		_spec.SetField(user.FieldIsAdmin, field.TypeBool, value)
	}
	if value, ok := uu.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if value, ok := uu.mutation.Color(); ok {
		_spec.SetField(user.FieldColor, field.TypeString, value)
	}
	if value, ok := uu.mutation.Settings(); ok {
		_spec.SetField(user.FieldSettings, field.TypeJSON, value)
	}
	if uu.mutation.RoomsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.RoomsTable,
			Columns: []string{user.RoomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedRoomsIDs(); len(nodes) > 0 && !uu.mutation.RoomsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.RoomsTable,
			Columns: []string{user.RoomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RoomsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.RoomsTable,
			Columns: []string{user.RoomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.RollsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.RollsTable,
			Columns: []string{user.RollsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(roll.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedRollsIDs(); len(nodes) > 0 && !uu.mutation.RollsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.RollsTable,
			Columns: []string{user.RollsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(roll.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RollsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.RollsTable,
			Columns: []string{user.RollsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(roll.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.CharsheetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CharsheetsTable,
			Columns: []string{user.CharsheetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(charsheet.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedCharsheetsIDs(); len(nodes) > 0 && !uu.mutation.CharsheetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CharsheetsTable,
			Columns: []string{user.CharsheetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(charsheet.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.CharsheetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CharsheetsTable,
			Columns: []string{user.CharsheetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(charsheet.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.RolldefsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.RolldefsTable,
			Columns: []string{user.RolldefsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolldef.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedRolldefsIDs(); len(nodes) > 0 && !uu.mutation.RolldefsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.RolldefsTable,
			Columns: []string{user.RolldefsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolldef.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RolldefsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.RolldefsTable,
			Columns: []string{user.RolldefsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolldef.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetLogin sets the "login" field.
func (uuo *UserUpdateOne) SetLogin(s string) *UserUpdateOne {
	uuo.mutation.SetLogin(s)
	return uuo
}

// SetPasswd sets the "passwd" field.
func (uuo *UserUpdateOne) SetPasswd(s string) *UserUpdateOne {
	uuo.mutation.SetPasswd(s)
	return uuo
}

// SetIsAdmin sets the "is_admin" field.
func (uuo *UserUpdateOne) SetIsAdmin(b bool) *UserUpdateOne {
	uuo.mutation.SetIsAdmin(b)
	return uuo
}

// SetNillableIsAdmin sets the "is_admin" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableIsAdmin(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetIsAdmin(*b)
	}
	return uuo
}

// SetName sets the "name" field.
func (uuo *UserUpdateOne) SetName(s string) *UserUpdateOne {
	uuo.mutation.SetName(s)
	return uuo
}

// SetColor sets the "color" field.
func (uuo *UserUpdateOne) SetColor(s string) *UserUpdateOne {
	uuo.mutation.SetColor(s)
	return uuo
}

// SetSettings sets the "settings" field.
func (uuo *UserUpdateOne) SetSettings(m map[string]interface{}) *UserUpdateOne {
	uuo.mutation.SetSettings(m)
	return uuo
}

// AddRoomIDs adds the "rooms" edge to the Room entity by IDs.
func (uuo *UserUpdateOne) AddRoomIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddRoomIDs(ids...)
	return uuo
}

// AddRooms adds the "rooms" edges to the Room entity.
func (uuo *UserUpdateOne) AddRooms(r ...*Room) *UserUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uuo.AddRoomIDs(ids...)
}

// AddRollIDs adds the "rolls" edge to the Roll entity by IDs.
func (uuo *UserUpdateOne) AddRollIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddRollIDs(ids...)
	return uuo
}

// AddRolls adds the "rolls" edges to the Roll entity.
func (uuo *UserUpdateOne) AddRolls(r ...*Roll) *UserUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uuo.AddRollIDs(ids...)
}

// AddCharsheetIDs adds the "charsheets" edge to the Charsheet entity by IDs.
func (uuo *UserUpdateOne) AddCharsheetIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddCharsheetIDs(ids...)
	return uuo
}

// AddCharsheets adds the "charsheets" edges to the Charsheet entity.
func (uuo *UserUpdateOne) AddCharsheets(c ...*Charsheet) *UserUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.AddCharsheetIDs(ids...)
}

// AddRolldefIDs adds the "rolldefs" edge to the RollDef entity by IDs.
func (uuo *UserUpdateOne) AddRolldefIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddRolldefIDs(ids...)
	return uuo
}

// AddRolldefs adds the "rolldefs" edges to the RollDef entity.
func (uuo *UserUpdateOne) AddRolldefs(r ...*RollDef) *UserUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uuo.AddRolldefIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearRooms clears all "rooms" edges to the Room entity.
func (uuo *UserUpdateOne) ClearRooms() *UserUpdateOne {
	uuo.mutation.ClearRooms()
	return uuo
}

// RemoveRoomIDs removes the "rooms" edge to Room entities by IDs.
func (uuo *UserUpdateOne) RemoveRoomIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveRoomIDs(ids...)
	return uuo
}

// RemoveRooms removes "rooms" edges to Room entities.
func (uuo *UserUpdateOne) RemoveRooms(r ...*Room) *UserUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uuo.RemoveRoomIDs(ids...)
}

// ClearRolls clears all "rolls" edges to the Roll entity.
func (uuo *UserUpdateOne) ClearRolls() *UserUpdateOne {
	uuo.mutation.ClearRolls()
	return uuo
}

// RemoveRollIDs removes the "rolls" edge to Roll entities by IDs.
func (uuo *UserUpdateOne) RemoveRollIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveRollIDs(ids...)
	return uuo
}

// RemoveRolls removes "rolls" edges to Roll entities.
func (uuo *UserUpdateOne) RemoveRolls(r ...*Roll) *UserUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uuo.RemoveRollIDs(ids...)
}

// ClearCharsheets clears all "charsheets" edges to the Charsheet entity.
func (uuo *UserUpdateOne) ClearCharsheets() *UserUpdateOne {
	uuo.mutation.ClearCharsheets()
	return uuo
}

// RemoveCharsheetIDs removes the "charsheets" edge to Charsheet entities by IDs.
func (uuo *UserUpdateOne) RemoveCharsheetIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveCharsheetIDs(ids...)
	return uuo
}

// RemoveCharsheets removes "charsheets" edges to Charsheet entities.
func (uuo *UserUpdateOne) RemoveCharsheets(c ...*Charsheet) *UserUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.RemoveCharsheetIDs(ids...)
}

// ClearRolldefs clears all "rolldefs" edges to the RollDef entity.
func (uuo *UserUpdateOne) ClearRolldefs() *UserUpdateOne {
	uuo.mutation.ClearRolldefs()
	return uuo
}

// RemoveRolldefIDs removes the "rolldefs" edge to RollDef entities by IDs.
func (uuo *UserUpdateOne) RemoveRolldefIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveRolldefIDs(ids...)
	return uuo
}

// RemoveRolldefs removes "rolldefs" edges to RollDef entities.
func (uuo *UserUpdateOne) RemoveRolldefs(r ...*RollDef) *UserUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uuo.RemoveRolldefIDs(ids...)
}

// Where appends a list predicates to the UserUpdate builder.
func (uuo *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.Login(); ok {
		_spec.SetField(user.FieldLogin, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Passwd(); ok {
		_spec.SetField(user.FieldPasswd, field.TypeString, value)
	}
	if value, ok := uuo.mutation.IsAdmin(); ok {
		_spec.SetField(user.FieldIsAdmin, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Color(); ok {
		_spec.SetField(user.FieldColor, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Settings(); ok {
		_spec.SetField(user.FieldSettings, field.TypeJSON, value)
	}
	if uuo.mutation.RoomsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.RoomsTable,
			Columns: []string{user.RoomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedRoomsIDs(); len(nodes) > 0 && !uuo.mutation.RoomsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.RoomsTable,
			Columns: []string{user.RoomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RoomsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.RoomsTable,
			Columns: []string{user.RoomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.RollsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.RollsTable,
			Columns: []string{user.RollsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(roll.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedRollsIDs(); len(nodes) > 0 && !uuo.mutation.RollsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.RollsTable,
			Columns: []string{user.RollsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(roll.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RollsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.RollsTable,
			Columns: []string{user.RollsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(roll.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.CharsheetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CharsheetsTable,
			Columns: []string{user.CharsheetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(charsheet.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedCharsheetsIDs(); len(nodes) > 0 && !uuo.mutation.CharsheetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CharsheetsTable,
			Columns: []string{user.CharsheetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(charsheet.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.CharsheetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CharsheetsTable,
			Columns: []string{user.CharsheetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(charsheet.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.RolldefsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.RolldefsTable,
			Columns: []string{user.RolldefsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolldef.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedRolldefsIDs(); len(nodes) > 0 && !uuo.mutation.RolldefsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.RolldefsTable,
			Columns: []string{user.RolldefsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolldef.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RolldefsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.RolldefsTable,
			Columns: []string{user.RolldefsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolldef.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
